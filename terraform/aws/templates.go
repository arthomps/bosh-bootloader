// Code generated by go-bindata.
// sources:
// templates/base.tf
// templates/cf_dns.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/lb_subnet.tf
// templates/ssl_certificate.tf
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBaseTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xdd\x6f\xdb\x38\x12\x7f\x8e\xff\x0a\x42\xe8\x43\xdb\x73\xd4\x24\x9b\x64\x7b\xc1\xfa\x21\x6d\x73\x77\x3d\xf4\xba\x45\x12\xec\x3d\x14\x85\x40\x53\xb4\xcc\x8b\x44\x0a\x24\xe5\xd4\x35\xf4\xbf\x1f\xf8\xa5\x6f\x59\x8a\x9b\xb4\x09\x9a\xc5\xee\x26\xe4\x68\x66\xf8\xe3\x7c\x51\x1a\x72\x2c\x58\xc6\x11\x06\x1e\xbc\x15\x01\x26\xa9\x07\xbc\xff\x65\x49\x3a\x67\x5f\xcd\x5f\x9b\x09\x00\x21\x4e\x31\x0d\x45\xc0\x28\x98\x81\xcf\x9a\x92\x50\x89\x39\xc5\x32\x88\xa0\xc4\xb7\x70\xed\x93\xc8\xfb\x32\x01\x60\x95\x22\xa0\x7f\x66\x40\xf2\x0c\x4f\xf2\xc9\xa4\x14\x21\x63\x11\xa4\x9c\xac\xa0\xc4\xc1\x0d\x5e\x7b\xc0\x9b\x33\xb1\x0c\x56\x89\x30\x72\x60\x1c\x31\x4e\xe4\x32\x01\x33\xe0\x5d\x5e\x9d\x7b\x13\x00\xb8\x80\xc1\x9c\x48\x01\x66\xe0\xf8\xe0\xef\xa7\x75\x86\x4a\x93\x1b\xbc\x0e\x52\x48\x78\x8b\x9b\x9a\xa0\x30\xc1\x8a\xd9\xb3\xcd\x0a\x72\x1f\xd3\x55\x40\xc2\x3c\x28\xe8\x26\x00\xa4\xd9\x3c\x26\x48\x71\x31\x74\x0d\x1d\x7d\x47\xeb\x97\x84\x01\x4b\x31\x15\x62\x99\x7b\x4a\x1b\x96\xc9\x34\x93\xa5\xf0\xc0\xc9\x35\x5a\xac\x60\x9c\x59\x15\xaa\xda\x96\x7c\x1d\x79\x0f\xb7\x1a\x5e\x0d\x86\xfd\xba\x96\x83\x41\x8a\x93\x5c\x2d\x54\x60\x2a\x88\x24\x2b\x5c\xd9\x1a\x27\x0d\x7f\x55\xbb\x09\xe3\xc0\xed\x78\x43\x6b\x4c\x52\xbf\x62\x15\x0e\x0b\x92\xd6\x95\x76\x24\x19\x8f\x0d\x9b\x3b\x30\x3a\x3b\x3a\xaa\xf1\x0a\x09\xc7\x48\x32\x1e\xc0\x30\xe4\x58\x88\x86\x5e\x4b\x29\x53\x71\xf6\xea\xd5\x30\xdb\x93\x93\x93\x13\xaf\x6d\x36\x04\x26\x01\x67\x31\xb6\x66\x63\xd8\x6f\x31\x17\x4d\xab\xec\x05\xca\xa5\x22\x79\xa5\xfe\x88\xc9\x02\xa3\x35\x8a\xb1\x5d\x2d\xe2\x58\xc1\x3e\xc7\x0b\xc6\x71\x10\x62\x21\x39\x5b\x3b\xbc\x01\xc8\x27\xca\xc8\x85\xc8\x12\xac\xf9\x05\x29\x8b\x09\x52\x04\x7f\xfc\x71\xf1\xe7\x3f\x26\x8a\x89\xf7\x17\xe6\x82\x30\xea\x9d\x01\xef\xe8\xe0\xf0\x68\xff\xf0\x60\xff\xf0\x77\x6f\xaa\xa6\xae\x24\x94\x38\xc1\x54\x7a\x67\xe0\xb3\x16\x68\xc4\x02\xe0\x9d\x23\x69\x1f\x12\x52\x9c\x9d\x6b\x19\x97\x4a\xe5\xa9\xa3\xf8\xc4\x09\x45\x24\x85\xb1\x77\x56\x3c\xa6\x78\x62\xbe\x22\x08\xab\x27\x31\x3a\xf2\x61\x02\xbf\x31\x0a\x6f\x85\x8f\x58\xe2\x59\xb2\xbc\x60\x72\xb1\x58\x60\xa4\xc4\x7b\xe7\x71\xcc\x6e\x4b\xee\x57\x24\x54\xa3\xe6\x89\x7c\x02\xc0\x97\x49\x3e\x51\x6b\xea\x04\xde\xac\xbb\x0d\x3d\xe8\x01\xdf\xd2\x3b\xf8\x41\xb1\x01\x0f\x00\xe0\xe7\x12\x1b\x8c\x8e\x14\x94\x0c\x11\x28\xf1\xb9\xb5\xc3\x69\x63\x5e\x4a\x88\x96\x7f\xb1\x38\x4b\x70\x73\xee\xad\x36\x87\xee\xb9\x77\x38\xc6\x12\x5f\x51\x98\x8a\x25\x93\xdd\xb3\x7d\x4f\x0a\xc4\xc9\xdc\x29\x84\x5b\x2a\x39\x82\xf7\x09\x8c\xb6\xcc\x52\x21\x21\x45\xfd\x04\x97\x38\x22\x8c\xf6\x4e\x5f\x61\x94\x71\x22\xd7\xff\xe4\x2c\x4b\xfb\xa9\xec\x02\xfb\x09\xb2\x39\xc5\xfd\xd3\x06\x82\x8e\xe9\x21\xd4\xfb\x90\x35\xb3\xd7\x30\x6a\xf1\xbc\xcc\x68\x2f\x26\xd7\x98\x27\x84\x42\xd9\x8f\x9a\x42\x4b\x48\xcc\x35\xe8\x6d\x75\x79\x6d\x7a\xb2\x07\xc0\x97\xa9\xfa\x6f\x87\x47\xa9\xd1\x4b\xeb\x32\x6a\xfc\xa5\x75\xaa\xe9\x64\x6f\xa3\x27\x2b\xa6\xba\xa7\x45\x10\x98\x9c\x7d\x82\x42\x68\x87\xbf\x2b\xef\xbd\x2d\x8c\x71\x0c\x85\x24\x28\x66\x30\x9c\xc3\x18\x52\x44\x68\x74\xf6\x72\x07\x11\x43\x01\xa1\x12\x0d\x03\xa8\x3d\x4a\x7b\x69\x35\x40\x28\x92\xa1\xd8\x6c\x19\x70\x5a\x66\x9c\x32\xdc\xe8\xf4\xe8\x43\x4e\xf3\x9e\x74\x40\xec\xde\x06\x29\x67\x0b\xd2\x48\x0d\xa5\xf8\xaa\xce\x86\x67\x4f\xfa\xee\xe6\xd9\x91\x5e\xbb\x08\x9b\x9c\x57\x90\x13\x38\x8f\x31\xf0\x28\x94\x01\x4c\x48\x90\x40\x9b\xac\xe5\x3a\xd5\xcc\xd4\xc0\x44\x97\x6b\x0b\x98\xc5\x12\xcc\xf4\xec\x66\xc3\x21\x8d\x30\x78\x76\x83\xd7\x53\xf0\xcc\x88\x3e\x9b\x01\xff\xfc\xbf\x57\x1f\xcf\xaf\xcf\xff\xf3\x5e\xe4\xb9\x22\x53\x04\x79\xae\x18\x6d\x36\x86\x2c\xd7\x85\xc3\x66\x83\x69\x98\xe7\x79\x1b\x34\x61\x43\x40\x10\xa9\x18\xe0\x19\xd5\x9a\x83\xa6\x80\x54\xde\x9c\x2a\xeb\x32\xfc\xfd\x8f\xe7\xd7\xef\xca\x41\x23\x68\x95\xa2\x80\x84\xc6\x6d\x0a\x6c\x56\x29\xf2\xd5\xbf\x24\xcc\xf5\xe2\x08\x8d\x54\xd4\xb3\x81\x3b\xe5\x4c\x32\xc4\x62\xfb\x88\x44\xa9\x71\x96\x05\x67\x6a\xdb\xb9\xd4\xe3\x07\x7a\x4c\x32\x37\xa2\xc6\x4e\x4f\x4e\x7e\x3b\xd1\xe3\x75\x85\x85\x2e\x71\x8d\xec\xfa\x8c\x6f\x6a\x5e\x18\xb7\xc6\xc3\x5c\xd7\xbe\xf9\xa0\x7e\x59\xf8\xb8\xf5\x23\x28\xe9\x54\x70\xff\xb0\x43\x43\x3b\x78\xbf\xea\xe1\xaa\x76\xa5\x12\x4d\x8c\xdc\xdf\x85\xfe\x33\xe0\xed\x1f\x1a\xd5\x11\x09\x79\x30\x8f\x19\xba\x31\xca\x1c\xf8\xfa\x9f\x57\x07\xa5\x14\x09\x23\x27\xe3\x63\x57\xc9\xb7\x4f\xa1\xdc\x77\x6a\xee\x1b\x43\xd6\xcf\xb6\xe3\x86\x75\x5b\x63\xfc\xc6\xda\x5d\xf5\x4d\x52\x50\xfd\x99\x01\xef\xd0\xe8\xf2\xbb\xa7\x37\xc2\x3a\xbc\x76\xdf\x2a\x95\x3c\xf2\x13\x1c\x92\x4c\xd7\x5f\x42\xe7\xc7\xc2\x2f\x2a\x64\x16\x64\x3d\x6f\x4a\x7f\xfb\xbb\x76\x15\x00\x8c\x9a\xba\x0a\x0d\xd0\x12\xa3\x1b\xf7\xe4\x02\xc6\x42\x95\xa3\x30\x21\xa0\xe3\x47\xb3\x8e\x19\xbb\xc9\xd2\xe7\x0a\x93\x4a\xbc\x99\x02\x35\xc0\x75\x61\xf0\xa2\xf0\xd9\xfa\x7e\x06\x24\xdc\x62\x04\xed\x08\x61\xf7\x7f\xe4\xae\xd8\xcc\x7a\x41\x57\xef\xdf\xb5\x08\x7a\xf6\xc8\x9c\x6a\x95\xe4\x5d\x4e\xb4\x6e\x9f\x2a\xe1\xda\x8e\xa8\xc5\x38\xb0\x3b\xce\xbd\x2e\x17\xd4\x04\x77\x9c\x87\xec\x7c\xf3\x50\x55\x06\x7c\x88\x10\x16\xa2\x3c\x01\xba\x78\x2f\x24\x27\x34\x6a\x10\x0b\x8c\x38\x96\x23\x89\xcd\x4e\xf6\x12\xa6\x9c\xad\x48\x88\xb9\x86\xd1\x1e\xd1\x0b\x5d\x4a\xf4\xcb\x31\x7b\xd0\x74\x1a\x94\x24\xe5\x98\x26\x31\x72\x4b\x6b\x2b\xad\xaa\x2b\x37\xdb\x7c\xd6\x4e\x37\x7d\x13\x9b\xc9\x9e\xcd\x25\xdd\x69\x64\x38\x91\xf5\xc4\xaa\xbe\x6c\xf6\xde\x92\xef\x96\xd2\x06\xed\xde\x69\x33\x2e\x24\x35\xdc\x91\x67\xba\x92\xe9\x59\x91\x9e\x0e\x54\xde\xd4\x1a\xb4\x5c\xb9\x1d\x6f\xc6\x07\x75\x67\x54\x3d\x41\xc6\x66\x22\x5d\xb8\x55\xd2\x50\x93\xcc\xe6\xf4\x6a\x42\x6a\x90\xa8\x54\x50\x4d\x4d\x8d\x69\x97\x49\x05\x8e\x17\x3d\xba\xb4\x5f\x55\xed\x08\xa4\x4a\xf0\x8f\x15\x48\x5b\x7c\x3c\x0d\x20\x75\x25\xf2\x58\x91\x74\x65\xd2\x16\x28\x75\x71\xb4\x05\x4b\x3d\x5f\xad\x54\x1a\xf3\xf5\xb2\xe5\x3e\x10\x85\xea\x7c\x56\x64\xb9\x1f\x8f\x2d\x1e\x05\xad\x29\xe2\x76\xb7\xd1\x83\x1f\x0d\xab\x70\x07\xc4\x47\x68\xa7\xd7\x6f\x3f\x0d\xa0\x79\x74\xb4\x1d\x4e\x3d\x6f\x0b\xc9\xf6\x02\xfb\x56\x66\x5f\xc5\x16\xc9\xd6\x55\x42\x5b\xb3\xaa\xae\x8c\x66\x3b\x40\x55\xab\x68\xcc\xc1\x9b\xce\x59\x46\xc3\x40\x19\x82\x4b\xd9\xee\x48\x5c\x31\x80\x11\x75\x80\x29\xab\x47\xd5\x00\x6f\xfe\xbc\xfa\xd7\x03\xe5\x7f\xa5\x45\x5f\xee\xaf\xbd\x71\xb8\x2b\xae\x1d\x0f\x8d\xaa\x90\x9c\x67\x74\x3c\x5f\x14\x14\xdf\xe1\x19\xbd\x6a\xfd\xa0\x82\x62\x94\x57\x6c\x8d\x32\x66\xff\x5a\xc6\x98\x8f\x0f\x3a\x5b\xa1\xd5\x93\x30\xd2\xaf\xc8\x9e\x24\xc2\xa7\xaf\x4f\x5f\x0f\x14\x1b\x86\xe2\x67\xa1\x9c\x41\xf8\x44\xa1\x7d\x7d\x7c\xfc\xdb\x76\x68\x2d\xc5\xcf\x34\xe0\xf2\xeb\x5e\x4a\x9e\x28\xce\xfa\xc3\xe2\x40\x9c\xb0\x24\x3f\x11\xe9\x27\x0a\xee\xd8\x93\xc8\x5d\x2b\x93\xa1\x42\xe2\xfb\x62\xc6\xce\x87\xbf\x87\x85\xfb\xfe\x0e\x7e\x8f\x0a\xee\x7b\x39\xd0\xec\x88\xfc\xd3\x3b\xcc\x94\x7d\x3d\x9d\x05\x2c\xcc\x24\x4b\xa0\x24\x08\xc6\xf1\xda\xf6\x31\x84\xc0\x3e\x01\xe6\x6b\xf0\xe6\xcd\x87\xfb\x2b\x68\x2d\xdf\xa1\x9a\xd6\xb5\x74\xdc\xb5\xac\x6d\x9e\x3f\xc6\x98\x59\x21\x6b\xe7\xaa\xb5\x26\xf5\x17\xaa\x54\x1d\x72\xdf\x53\x8f\xfe\x0c\xec\x1e\x4b\x0d\xea\xf0\x43\x1c\x87\xcb\x6c\xfe\x84\x10\x7c\xfd\xfa\xf8\x78\xa0\xd4\x34\x14\x3f\x08\x41\x57\x55\x3e\x21\x08\x1f\x4f\x15\x59\xf4\xcf\x45\x65\xbb\xdd\x43\x42\xf8\xf4\x52\x68\xad\x22\x69\x97\x36\xbf\xd0\x97\x94\xbb\xd6\x81\xf7\xf2\x9e\xa9\x07\xf1\x5f\xe3\x93\xcb\x7d\x22\xde\x78\x5b\x6a\x3b\x0c\xca\x97\xa5\x6e\xe1\x95\x8f\xc1\xb5\x37\xa8\x87\xce\x67\x8e\x8e\xbb\xf8\xc1\x15\x24\x31\x9c\x93\x58\x49\xfe\xc6\x28\xee\xfd\xbe\xdc\xd8\x7a\xad\x87\x57\xd3\xca\xd6\x7a\x95\xa2\xb3\xb1\xa5\xb5\xd2\xb3\xea\xea\x35\xca\x22\x36\x56\xd6\x7a\xa7\x77\xaf\x46\x99\xee\xef\xad\x9c\x65\x12\x07\x52\x21\xe0\x94\xaf\x0d\x55\x56\x30\xf2\x73\xb4\x7e\xbc\x97\x57\x88\x85\x24\x14\xaa\xca\x3d\xa8\xac\xb7\xfe\x6a\x1b\x00\xdb\xc6\x50\x13\xdb\xd1\xe3\xe0\x90\xab\x88\xa9\x3d\x52\x19\xf7\x9b\xfa\x6c\x53\xdf\xb2\x82\xb6\x7d\x56\xb7\x19\x78\x66\xa6\xb2\x13\x2e\xcf\xd4\x9b\x5c\x46\x34\xb7\x7c\x97\xba\xf5\x77\xe6\x4e\x76\x67\x83\x46\x9f\x06\x3d\x5c\x7a\x6c\x7f\x98\x69\xeb\xc1\x56\x13\x48\x93\x40\xd4\xdd\x2a\x26\x42\x6e\x73\xaa\x32\xd8\x55\x81\x47\x2c\xa3\xb2\x19\xb5\x9e\x6d\x62\x4c\x23\xb9\xd4\xdd\x3f\x6d\xb9\x2f\x5a\x5f\x36\x76\xf2\x49\x35\x6c\x74\x79\x5e\x46\x94\xc3\x53\x6f\x0a\x8e\xa7\x46\x2f\x9f\xd0\x10\x7f\xfd\xdb\xa1\x11\xd8\x52\xc4\xb0\xc1\xb1\x6e\xe8\xee\xd1\xb5\xc6\xe9\xc5\x9d\xdb\x2d\xb4\x7a\xcf\x36\x15\x1e\xb6\xc7\xa8\xa3\xf7\x9f\x44\x94\x71\x1c\xa0\x25\xa4\x11\x36\x1d\x50\xe5\xca\xbd\x69\xc7\x0e\xda\x7e\xb4\x81\x80\x52\x6c\xdc\x3d\x05\x95\x7e\x7e\x23\x03\x4b\xd1\xb8\x56\x8f\x2c\xed\x9e\xa8\x31\x3e\xda\xa5\xcd\x8e\x61\x65\x94\x85\x8f\x35\xef\xae\x88\xe4\x4c\xad\xe2\xc2\x4d\x99\xfe\x4b\x9f\x84\x2d\xa3\xbb\x07\x28\x5a\x9f\x50\xe1\xb7\x32\x72\x05\x09\x4c\x53\x95\x54\x75\xe7\x53\x19\x6b\x26\x7b\x00\x7c\x23\x69\x02\xd3\xe7\xf5\xc8\xd3\xa1\x76\x47\x00\x9a\x82\xc1\xa7\x94\x7a\x2f\x26\x7b\x83\x3a\x6a\x73\xfa\x69\x5a\x96\xc6\x5c\xd1\xb6\x0c\xad\xc6\xef\xc7\xf4\xd6\x2d\x19\x97\xc1\x68\x72\xe5\x9f\x8d\xaa\x6a\xb0\xa4\x3a\x3c\xed\xb0\xfc\x55\x8a\x3c\xcd\xce\x9a\x74\x2b\xa0\x56\xeb\x1c\x27\x35\xaf\x37\x99\x62\x0a\x29\x5a\x3b\x52\x2b\x5a\x91\x60\xaa\xad\x32\xa4\x22\x58\x32\x21\x29\x4c\x74\xf4\xd2\x9d\x3c\x63\xa2\xa5\x52\xab\xaf\x37\xb6\x5e\x6d\xa8\xe0\x13\x8d\x0b\x5d\xce\x94\x0c\x5d\x67\x12\xdd\x1e\xed\x16\x31\xbb\x0d\x62\x16\xa9\x2a\x6a\x6e\x6f\xa3\xc5\x2c\xb2\x85\x73\x79\xcf\x4b\xd1\xa2\x98\x65\xe1\x2d\x94\x68\x19\x14\x24\xfe\x7c\x1e\xbb\xee\x7b\x00\x8a\x2b\x0a\x90\xd3\x6a\xa6\x2b\xae\x01\x38\x71\xc2\xde\x2f\x68\xe5\xc7\xbe\xe4\x28\x39\x5c\x2c\x08\x72\x4d\xc0\x33\xe0\x5d\x5e\xfc\xfb\xe2\xed\x75\xc7\x92\xba\xd4\xac\x2e\x4f\x69\x1b\xa4\x1c\x2f\xc8\xd7\x4a\xe3\x65\xc5\x64\xf3\xfd\x98\x45\xee\x55\xeb\xb6\x0b\x71\xc5\x6a\xb6\xdc\x8a\xdb\x57\x44\x8a\xa1\xd8\x37\xd7\x2f\x1e\xec\x6a\x9b\xbb\x5a\x36\x7c\x09\x6d\xf8\x8a\xdb\x2a\x45\xa5\xe2\x43\x97\xdd\x7a\xef\xd4\x8d\xbb\xe4\x56\x81\xe1\xee\x98\x96\x37\xde\x7a\x2e\x9e\x94\x16\xe7\xde\xba\x3f\xec\x5d\x38\x25\xca\x5e\x9e\xfa\xc0\x22\x7d\xe9\xab\x7a\xcb\xa9\x3e\x7d\x25\x39\x86\x49\x6b\xfe\x53\x26\x3f\xb0\xe8\x62\x85\x69\xfd\xc2\x97\x9e\x74\x37\xbe\x1c\xf7\xad\x14\x46\x80\x70\x7b\xf6\x65\xd8\x36\xba\x6e\x54\x6d\xdb\xc1\x9b\xc4\x76\x5c\x7b\xc5\x6f\x9b\x32\x5a\xde\xe0\x75\xc0\x99\x84\xf6\xf3\x49\xb3\xe5\xdb\x3e\xa2\xc2\x45\xf7\x2d\x60\x33\xef\xbb\xff\xbb\x4b\x49\xff\x0f\x00\x00\xff\xff\xe5\xce\x51\xcc\x8e\x3d\x00\x00")

func templatesBaseTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBaseTf,
		"templates/base.tf",
	)
}

func templatesBaseTf() (*asset, error) {
	bytes, err := templatesBaseTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base.tf", size: 15758, mode: os.FileMode(420), modTime: time.Unix(1508537102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\xc1\x6a\xf3\x30\x0c\xc7\xef\x79\x0a\x61\xbe\xd3\x07\x35\x85\xb2\x63\x0f\x65\xec\xb8\xbe\xc0\x18\xc6\xb1\xb5\xc6\xc3\x89\x8d\x65\xa7\xeb\x8a\xdf\x7d\x38\xc9\xa0\xdd\xc6\xc8\x20\xbd\x25\x46\xfa\xff\xf4\x93\x7a\x19\x8c\xac\x2d\x02\xa3\x13\x45\x6c\x85\x76\xad\x34\x1d\x83\x73\x05\x10\x4f\x1e\x61\x0b\x8c\x62\x30\xdd\x81\x55\xb9\xaa\x02\x92\x4b\x41\x21\x30\x79\x24\x11\x5c\x8a\x78\xb7\x11\xef\xae\x43\x06\x0c\xbb\x5e\xe8\x8e\xa6\xdf\x92\xd0\xc9\x76\x48\xf8\x77\xee\x65\xe0\x57\x88\xcc\xaa\x82\x90\x07\x1a\x2a\x01\xf6\x57\xb5\x25\xcb\xe8\xbc\x6a\x1c\x45\xd4\xab\x21\xb2\x02\xc8\x65\x08\x97\xa2\x4f\xf1\x9a\x27\x0a\x4a\x10\x86\x1e\x03\x8d\xf0\x5e\xda\x34\x25\x7e\x1d\x96\x5f\xb6\xf2\xcb\xd6\xfc\x8b\x66\x40\xe5\x82\x66\xc0\x8e\xc6\x6a\x25\x83\x2e\x11\x23\x6b\x18\xc1\xe8\x39\x34\xa3\x33\xfb\x5c\x0d\x40\xe9\xf8\xcf\x7f\xde\xcf\x74\x81\xb1\xe8\x7e\xbf\x7b\x7c\x18\xde\xa2\x85\xf1\x6d\xb3\x5e\x97\x1d\x8e\x63\x11\x6c\xe1\x69\x82\xa3\xad\xb9\x7a\x19\x67\x08\xc2\xd6\xbc\xc0\x0b\x30\xb3\xe7\x19\x7a\x44\xcd\x02\x56\x44\xcd\x8d\xbc\x88\x9a\xbf\x4b\xd5\x6e\x11\xab\x12\x33\x47\x6b\x37\x57\xc9\x78\xfe\x9a\x5a\x5f\xbb\xb7\xe1\xdb\xa7\xda\x1a\x25\x8c\x9f\x67\x15\x95\x5f\x40\x2a\x2a\x7f\xa3\x53\x45\xe5\xbf\x9f\xea\x23\x00\x00\xff\xff\x30\x40\x15\x44\x75\x04\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 1141, mode: os.FileMode(420), modTime: time.Unix(1508535618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\xdc\x5b\x6b\xe3\x46\x14\x07\xf0\x77\x7f\x0a\x61\xfa\x54\x88\xeb\xb1\xee\x05\xbf\x74\xfb\xd0\x42\x29\x4b\x77\xdf\x4a\x11\xb2\x3c\x89\xc5\x2a\x92\x99\x19\xbb\x6c\x83\xbf\x7b\xd1\xd5\xce\xc6\xd6\xe5\xbf\xff\x25\x69\x53\xfa\x10\x49\x67\xe6\x8c\x74\xf4\xd3\xb1\x89\x56\x49\x5d\x1c\x54\x22\xad\x79\xfc\xb7\x8e\xb4\x4c\x0e\x2a\x35\x9f\xa3\x07\x55\x1c\xf6\x73\x6b\x9e\xdc\x47\x5a\xef\xa2\x6c\xf3\x62\xd7\xd3\xcc\xb2\xb6\x52\x27\x2a\xdd\x9b\xb4\xc8\xad\xb5\x35\x7f\x7a\x5a\x7c\xf8\xf0\xcb\x6f\x3f\xfd\x7c\xde\x7c\x3a\xcd\x67\x96\x75\xdc\x27\x51\xba\xb5\xaa\x9f\xb5\x35\xff\xee\xa9\x9c\xeb\xb8\x4f\x16\xe5\xff\xe9\xf6\x34\x9f\xcd\x2c\x2b\xcd\x1f\x94\xd4\xba\x1a\xd8\xb2\x92\x74\xab\xa2\x4d\x56\x24\x9f\xb4\xb5\xb6\xfe\x9c\x2f\x17\xd5\x7f\x3f\x2c\xe7\x7f\x55\xfb\xf7\xaa\x30\x45\x52\x64\xcd\x90\x26\xd9\xcf\xab\xed\xf7\xaa\x78\x8c\xf6\x85\x32\xd5\xf6\xd5\x6a\xb5\xaa\x36\x9b\xa2\xdd\x78\xb1\xf9\x54\x4e\x2b\x2f\x67\x3d\x47\xaf\xad\xe5\xb3\xc0\xf6\xf7\x6e\xde\xb5\x35\xbf\x13\xf3\x11\xb9\x56\xb3\x98\xf8\xa1\x9d\xe3\xf7\xf8\x51\xd6\x67\xe1\x18\xab\x85\xcc\x8f\x51\xba\x3d\xdd\x25\xf7\x77\x5a\xef\xee\xb2\xcd\x5d\x7b\xa2\xef\xea\x13\x5d\x8d\x70\x9a\xcd\x8a\x83\xd9\x1f\xcc\xd0\x15\x39\xc6\xd9\x41\xae\x9b\x33\xfc\xfc\x80\xc5\xad\xc8\xfa\x0a\x9c\x66\xb3\xd1\xb5\x90\xe6\x46\xaa\x3c\xce\xa6\x14\xc5\xaf\x4d\x0c\xa3\x38\x9e\x4f\x5b\x9f\xf4\xe9\x4b\xfe\xbf\x17\x52\x7b\x95\xc6\x57\x54\xef\x75\x1d\x57\x5a\x37\x86\xb8\x51\x63\x32\xdb\x5c\x16\x56\x3d\x51\x5e\xae\xeb\xea\x4f\xb7\x58\xbd\x2b\x94\x89\x5e\x2c\xb9\x5c\x5a\xa2\x0a\xad\xa3\x7f\x8a\x5c\x46\x59\x11\x6f\xa3\x4d\x9c\xc5\x79\x92\xe6\x0f\xd6\xda\x32\xea\x20\xcb\x93\xb8\x93\x71\x66\x76\x51\xb2\x93\xc9\xa7\xe6\x64\xd6\x9b\x3e\x47\x66\xa7\xa4\xde\x15\xd9\xb6\x9a\xce\xad\xf6\x1d\xf2\x97\x7b\xd7\x56\x5d\x0f\xd5\x7a\x8f\x71\xf6\x3c\x4d\xaf\xbe\xe4\xb1\x7a\x90\xe6\xc5\x12\x3e\xbe\x7b\xff\x63\x59\x38\xf5\x35\x37\xe9\xa3\x2c\x0e\xe6\x8b\x83\xba\xaa\xca\x52\x6d\x64\x2e\x55\x93\x66\x9a\x6b\x13\xe7\x89\xbc\x52\x84\x97\x3b\x2f\x6a\xab\x2b\xe8\x6c\x73\x0e\xb2\xbe\x0c\x2d\x77\x5e\xdc\x08\xcf\xee\x85\x2a\x0f\xde\x2d\xa7\x0f\x9b\x5c\x1a\x7d\x91\x45\x37\x52\xb5\x67\x51\x86\xd6\xc7\x2c\xbe\x6f\xa2\xae\x56\x6b\x59\x27\x17\xa5\x79\xc6\x43\x66\x9b\x73\x1a\x8b\xf2\xb0\xba\xf6\x5e\x0e\x71\x50\xd9\x88\x11\xb6\xb9\x8e\xce\xa3\x0c\x2b\xa9\x8a\x83\x91\x6a\xfc\x43\xf3\x8f\xea\xf8\xb7\xf3\xd4\x0c\x96\x57\xa8\xab\x36\x9e\xbe\xd5\x94\x8e\x63\x5f\x99\xb3\xde\xfa\x0d\x27\xbd\x31\xeb\x79\xda\xb7\x83\x7a\x5d\x54\xe3\x1a\x84\xfe\x02\x1c\x80\xfc\x56\xf0\x84\x36\xe1\x3c\xc4\xc4\x4e\xa1\xbe\x13\x5e\xab\x55\xe8\x5d\x39\xf1\x06\x7a\x8b\x45\x35\xa1\x59\x18\x79\x75\x47\x97\x19\xd8\x32\x74\x03\xe0\x5d\x43\xb7\xfc\x37\xd3\x38\x88\xd5\x50\xe7\x10\x2c\x59\x7d\x43\x53\xa5\x57\xbb\x86\x9d\x31\x3d\x6d\x43\x13\x79\xb5\x69\x68\x23\xc7\x65\xd1\x97\xc6\x50\x1e\x17\x8f\x8d\x97\x99\xb4\xc1\xba\x8e\xd6\x3a\x8b\x12\xa9\x4c\x7a\x9f\x26\xb1\x91\xa5\x22\x1d\x20\x69\xfc\x18\x69\xa9\x8e\x52\x5d\x1e\x52\xb6\x21\xe5\xaf\x8b\x58\xe5\x27\xde\x82\x7a\xda\xb1\xcb\x27\xd2\xf5\x05\x69\x9d\x71\x97\x43\xd5\xf1\xeb\x1b\xbb\xf3\x14\x43\xbd\x5d\x77\xe4\xf5\xf6\xee\x3c\xd0\x40\x87\x77\x1e\x67\x6a\x93\x67\x92\xfd\xf8\x0e\xef\xe3\xbb\xf7\x6f\xe9\x6b\x11\xb1\x5c\x39\x57\x9e\x50\x42\xac\xde\x60\xe3\x63\x92\xfd\xb8\xae\xa7\xe7\x8a\x0c\x3c\x8b\xae\x46\x4e\xe8\x77\x9a\xf8\x89\xcd\x4e\x55\x14\xaf\xd5\xeb\xdc\x5e\x32\xb9\x90\x5e\x3b\xc5\xff\x4c\x2f\xd6\xd4\xf9\x84\x46\x6c\x4c\xd9\x8d\xab\x7c\xb0\x05\xab\xa3\xf1\xfe\xab\x5e\x32\xbd\xf9\xf2\x7a\x9a\x2f\xbb\xa7\xf9\x72\xbf\xae\xf7\xb2\x27\xf4\x5e\xdd\x8d\x33\xfd\x3b\x9b\x2e\x74\xf0\x3b\x9b\x71\x79\xb8\x78\x1e\x2e\x33\x0f\x0f\xcf\xc3\x63\xe6\xe1\xe3\x79\xf8\xcc\x3c\x02\x3c\x8f\x80\x99\x47\x88\xe7\x11\x12\xf3\xb0\x7b\x3e\xad\x0c\xe4\x61\xf7\x7c\x5c\x99\x9e\x87\xc0\xf3\x10\xcc\x3c\xd0\xef\x7c\xbb\x50\x52\x1e\x36\x9e\xc7\xad\xcf\x3a\x50\x1e\xb8\xa7\x36\xd3\x53\x1b\xf7\xd4\x66\x7a\x6a\xe3\x9e\xda\x4c\x4f\x6d\xdc\x53\x9b\xe9\xa9\x8d\x7b\x6a\x33\x3d\xb5\x71\x4f\x6d\xa6\xa7\x0e\xee\xa9\xc3\xf4\xd4\xc1\x3d\x75\x98\x9e\x3a\xb8\xa7\x0e\xd3\x53\x07\xf7\xf4\xe6\x77\x47\x50\x1e\xb8\xa7\x0e\xd3\x53\x07\xf7\xd4\x61\x7a\xea\xe0\x9e\x3a\x4c\x4f\x1d\xdc\x53\x87\xe9\xa9\x83\x7b\xea\x30\x3d\x75\x70\x4f\x1d\xa6\xa7\x2e\xee\xa9\xcb\xf4\xd4\xc5\x3d\x75\x99\x9e\xba\xb8\xa7\x2e\xd3\x53\x17\xf7\xd4\x65\x7a\xea\xe2\x9e\xba\x4c\x4f\x5d\xdc\x53\x97\xe9\xa9\x8b\x7b\xea\x32\x3d\x75\x71\x4f\x5d\xa6\xa7\x2e\xee\xa9\xcb\xf4\xd4\xc5\x3d\x75\x99\x9e\x7a\xb8\xa7\x1e\xd3\x53\x0f\xf7\xd4\x63\x7a\xea\xe1\x9e\x7a\x4c\x4f\x3d\xdc\x53\x8f\xe9\xa9\x87\x7b\xea\x31\x3d\xf5\x70\x4f\x3d\xa6\xa7\x1e\xee\xa9\xc7\xf4\xd4\xc3\x3d\xf5\x98\x9e\x7a\xb8\xa7\x1e\xd3\x53\x0f\xf7\xd4\x63\x7a\xea\xe3\x9e\xfa\x4c\x4f\x7d\xdc\x53\x9f\xe9\xa9\x8f\x7b\xea\x33\x3d\xf5\x71\x4f\x7d\xa6\xa7\x3e\xee\xa9\xcf\xf4\xd4\xc7\x3d\xf5\x99\x9e\xfa\xb8\xa7\x3e\xd3\x53\x1f\xf7\xd4\x67\x7a\xea\xe3\x9e\xfa\x4c\x4f\x7d\xdc\x53\x9f\xe9\x69\xdf\x5f\xcf\x0d\xe4\xd1\xf7\xe7\x73\xd3\xf3\xc0\x3d\x0d\x98\x9e\x06\xb8\xa7\x01\xd3\xd3\x00\xf7\x34\x60\x7a\x1a\xe0\x9e\x06\x4c\x4f\x03\xdc\xd3\x80\xe9\x69\x80\x7b\x1a\x30\x3d\x0d\x70\x4f\x03\xa6\xa7\x01\xee\x69\xc0\xf4\x34\xc0\x3d\x0d\x98\x9e\x86\xb8\xa7\x21\xd3\xd3\x10\xf7\x34\x64\x7a\x1a\xe2\x9e\x86\x4c\x4f\x43\xdc\xd3\x90\xe9\x69\x88\x7b\x1a\x32\x3d\x0d\x71\x4f\x43\xa6\xa7\x21\xee\x69\xc8\xf4\x34\xc4\x3d\x0d\x99\x9e\x86\xb8\xa7\x21\xd3\xd3\x10\xf7\x34\x24\x7a\x2a\x96\xb0\xa7\x6d\x28\x29\x0f\xd8\xd3\x36\x94\x94\x07\xec\x69\x1b\x4a\xca\x03\xf6\xb4\x0d\x25\xe5\x01\x7b\xda\x86\x92\xf2\x80\x3d\x6d\x43\x49\x79\xc0\x9e\xb6\xa1\xa4\x3c\x60\x4f\xdb\x50\x52\x1e\xb0\xa7\x6d\x28\x29\x0f\xd8\xd3\x36\x94\x93\x87\xc0\x3d\x15\x4c\x4f\x05\xee\xa9\x60\x7a\x2a\x70\x4f\x05\xd3\x53\x81\x7b\x2a\x98\x9e\x0a\xdc\x53\xc1\xf4\x54\xe0\x9e\x0a\xa6\xa7\x02\xf7\x54\x30\x3d\x15\xb8\xa7\x82\xe9\xa9\xc0\x3d\x15\x4c\x4f\x05\xee\xa9\x60\x7a\xba\xc2\x3d\x5d\x31\x3d\x5d\xe1\x9e\xae\x98\x9e\xc2\xff\x86\x4b\x17\x4a\xca\x03\xf7\x74\x35\xd2\x53\xde\x4b\x80\x5f\xff\xca\x71\x33\xfe\xd0\xfb\xc6\xf5\x61\xd7\x5f\x36\x6e\x86\x18\x78\xd3\xb8\x19\xe1\xd9\x6b\xc6\xff\x06\x00\x00\xff\xff\x86\x35\x6c\xe5\x7d\x4d\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 19837, mode: os.FileMode(420), modTime: time.Unix(1508535618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x6e\x9c\x30\x10\xbd\xf3\x15\x96\xd5\x53\xa5\xa5\x9b\x4d\x2a\x55\x95\x38\xa5\x97\x5e\xaa\x1e\x7a\xab\x2a\xcb\x98\xc9\x62\xc5\x6b\xa3\xb1\x4d\x95\xae\xf8\xf7\x0a\x1b\x58\x08\x6c\xc2\x56\x89\x1a\x56\x7b\x60\xc6\x33\xef\xcd\xf8\xcd\x80\x60\x8d\x47\x01\x84\xf2\xdf\x96\x59\x10\x1e\xa5\x7b\x60\x7b\x34\xbe\xa2\x84\x0a\xa3\x85\xf1\x68\x81\xa9\x7c\xe6\x3d\x26\x84\x14\x60\x05\xca\xca\x49\xa3\x49\x46\xe8\xf1\x98\xde\xf6\x21\x5f\x4e\xae\xa6\xa1\x09\x21\x75\x25\x98\x2c\x48\x78\x32\x42\xdf\x1d\x5b\xc8\xba\x12\x69\xfb\x97\x45\x43\x93\x84\x10\xa9\xf7\x08\xd6\x86\xe4\x84\x08\x59\x20\xcb\x95\x11\xf7\x96\x64\xe4\x27\xdd\xa6\xe1\xf7\x61\x4b\x7f\x05\x7f\x85\xc6\x19\x61\x54\x97\xd2\x89\x8a\x06\xfb\x1d\x9a\x03\xab\x0c\xba\x60\xff\xb4\x0d\x46\x67\x7a\xd3\x60\x6c\x5e\x0b\x72\xb7\xdb\xed\x16\x40\x3b\xf3\xab\xc1\xde\xdc\x5c\x2f\xa0\x46\x6b\x00\x85\x31\xe6\x29\x36\x23\xd3\x16\xf5\xef\x03\x6a\x46\xe8\xe6\x8a\xae\x60\x1a\x50\x1c\xdf\xf7\x18\xdf\xf8\x01\xe2\x6d\xd7\x1c\x53\xd0\x35\x93\x45\xb3\x19\x74\xb5\x51\xf9\xa6\xd7\xd5\x26\xea\x2a\x24\x69\x92\xe4\x12\x69\x4a\xed\x00\x35\x57\x97\x6a\xf4\x6b\x17\xf7\x12\x5a\x9d\x42\xc7\xde\xc4\xb8\xa9\x27\x7d\x62\xa8\x42\xea\xcb\xa4\x7d\x46\xdc\xe7\xe4\xfd\x5f\x58\xae\x98\x86\xb7\x28\xcc\x5e\x55\xe7\x14\x6a\xbc\xab\xbc\xbb\x44\x8a\x35\x57\x1e\xb2\x15\x0d\x3f\x93\x25\x4a\x6f\x36\x1c\xa0\xf2\x47\x13\x11\xe1\x74\x5b\xe3\xe2\x33\x14\x6e\x4b\x83\x8e\x2d\x95\xdf\x96\x29\xd0\x58\xcb\xfe\x18\x0d\x4c\x19\x5e\xb0\x9c\x2b\xae\x85\xd4\x7b\x92\x11\x87\x1e\xda\x9e\x96\xc0\x95\x2b\x99\x28\x41\xdc\x77\xbd\x8d\xa6\x07\xe6\x4a\x04\x5b\x1a\x55\xc4\xeb\x0e\x3e\xaf\xe7\xde\x8c\x5c\xc5\x6b\x0d\x65\xd7\x5c\x4d\xa9\x5e\x77\x1a\xe0\xb8\x07\x37\xab\xe3\xc7\xed\xf7\xcf\xad\xde\xa3\x08\x9c\x3c\x80\xf1\xee\xd1\xa1\x8f\xbd\x00\x94\xb4\x0e\x34\x60\x47\x54\x6a\xeb\xb8\x16\xb0\x30\x3b\x63\xe7\x48\x6c\x83\xc2\x55\x7e\x0a\x22\xe3\x6f\x4a\x74\x8d\xe6\x62\x32\x1a\xeb\x58\x8c\x67\x66\x4e\xe3\x19\x1e\xe3\xe0\x39\x95\x7f\xe1\xf2\x44\x4b\x9e\xe7\xd2\x7f\x93\x96\xa9\x58\xab\x62\xac\xb5\x8a\x09\x40\x27\xef\xa4\xe0\x0e\xda\xed\x3b\x2c\x5e\xc9\x0f\xcc\x02\xd6\x80\xe3\x23\xa9\xca\xc3\x6b\xca\x51\x37\x43\x3d\x2f\xba\xe0\xac\xcf\x35\x38\x3b\xaa\x66\x48\x16\x3c\x2d\x85\xee\x4c\xfa\xbe\x8b\x3a\xb7\x18\xda\x61\x1c\x6d\x81\x53\x75\xa0\xf2\x09\x99\xb4\x3d\x19\xc7\x7c\x31\x91\x47\xb5\x2e\x4f\xa1\x2d\x1b\x72\xfd\x0d\x00\x00\xff\xff\xfb\x9d\x40\x3e\xea\x09\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 2538, mode: os.FileMode(420), modTime: time.Unix(1508535618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLb_subnetTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x51\x6e\x9c\x30\x10\x86\xdf\x39\xc5\x68\x94\x87\xb4\xdd\xb8\xdb\xa8\xaf\x7b\x85\x5e\xa0\x8a\x2c\x63\x4f\xc9\xa8\x8e\xbd\xc2\x86\x74\x8b\xb8\x7b\x85\x4d\x0a\x16\x6c\xbb\x52\x40\x48\xc8\xf6\x7c\xf3\x8f\xe7\x9f\x96\x82\xef\x5a\x4d\x80\xea\x35\xc8\xd0\xd5\x8e\x22\x02\xda\x7a\xfe\x0f\x08\x43\x05\xa0\x7d\xe7\x22\xac\x9f\x13\xe0\xdd\x60\xc9\x35\xf1\xf9\xbe\x57\xad\x50\xbd\x62\xab\x6a\xb6\x1c\x2f\xf2\xb7\x77\x14\x3e\x8c\x58\x01\xf4\x67\x2d\xd9\x6c\x22\xa7\x6c\xfd\x59\x8b\xe9\x63\x93\x4e\x6a\x36\xad\xac\xad\xd7\x3f\x8b\x93\xd3\x72\xd6\x72\x8f\x5f\x8e\x22\xbd\x9f\x1f\x8f\x78\x80\xaf\x87\xac\x4b\xb0\x33\xf4\xeb\xd3\x63\x4e\xb8\x11\x92\x31\x64\xe9\x85\x5c\xbc\xa2\xb5\x20\x4d\x9c\x0a\x20\xaa\x26\xa4\xe2\x01\xbe\xa9\x97\x19\x33\x85\x93\xeb\x25\x9b\xf1\xc1\xd6\x0f\x59\xd8\xdd\xb0\x8a\x4e\x22\xc6\x09\x60\xf9\x07\xe9\x8b\xb6\x34\x53\xb8\x71\xbe\x25\xa9\x9f\x95\x6b\x28\xc0\x09\xbe\xe3\x52\x33\x1e\x00\x37\xba\xf0\x29\xb1\xc6\xaa\x2a\xfb\xd4\xfa\x2e\x92\x8c\xaa\xb6\x94\x9b\x55\x2c\x0c\xcb\xb5\xef\xdf\xf5\x3e\xef\x0a\xc9\x50\x88\xec\x54\x64\xef\xe4\xaa\x45\x27\xc0\xb7\x66\x1c\xa7\x8a\x1b\x15\xe9\x55\x5d\x8a\xa4\xec\x22\xb5\x8e\xa2\x9c\x37\x05\x37\x6f\xcd\x5e\xa5\x29\x42\x56\xeb\xa2\x54\xf3\x2f\xe9\x33\x48\x85\xe0\x35\x27\xa9\x08\x98\x77\xfe\xe3\xe4\x5b\x6d\x9c\x19\x7f\x9d\x5c\x58\x6a\x99\x1c\xb1\x64\x13\x1f\x05\x9b\x8d\xad\xde\x55\xb8\xef\xe2\xb9\x8b\xab\xe1\x94\x6c\xe6\xaa\x7a\x65\x3b\x4a\x8e\xca\xb4\x7d\x39\x23\x3e\xed\x73\xb6\x55\xdf\x8e\xdd\xc4\x5e\xcd\x92\x26\xf9\x76\xf0\x62\xb6\x4c\xfc\x13\x00\x00\xff\xff\x29\xc2\x4a\x36\xab\x04\x00\x00")

func templatesLb_subnetTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesLb_subnetTf,
		"templates/lb_subnet.tf",
	)
}

func templatesLb_subnetTf() (*asset, error) {
	bytes, err := templatesLb_subnetTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/lb_subnet.tf", size: 1195, mode: os.FileMode(420), modTime: time.Unix(1508535618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSsl_certificateTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x41\x6e\xc3\x20\x14\x44\xf7\x9c\x62\x84\xba\xee\x0d\x72\x16\x84\xf1\xb8\xf9\x2a\x31\xd1\x87\xd0\xa2\x88\xbb\x57\xc6\x1b\xa7\x92\x37\x61\x83\x04\xf3\x46\x6f\xaa\x57\xf1\x53\x24\x6c\xce\xd1\x05\x6a\x91\x45\x82\x2f\xb4\x78\x1a\xa0\xb4\x3b\x71\x81\xcd\x45\x65\xfd\xb2\xa6\x1b\x73\x4a\xb8\x70\xf5\xb2\xbe\xc1\xdd\x55\xea\x76\x7f\xb3\x9d\xd2\xca\x9c\x1e\x1a\x08\xeb\x7f\xb2\x13\x7f\x73\x99\x5a\xa9\xaf\xca\x36\x4e\xe3\x61\xaf\x59\xfd\x6d\x2b\xe7\x22\xbf\x5b\xdb\xc7\xb3\x7a\xfd\xcc\xd7\xa4\xc5\x71\xad\x4e\xe6\x6e\x8d\x01\x8e\x2a\x53\x9a\x1b\x0e\xe1\x57\xd3\x6e\xff\xc5\xc7\xe2\xd3\xf8\xfe\x3d\xa0\xc3\x44\xec\xe7\x14\x3a\x44\x77\xbf\x28\x0b\x43\x0b\x91\x63\x14\x10\x94\x43\x95\x4b\x52\xba\x99\xb9\x68\x6a\xb8\xa0\xe8\x83\x06\xe8\xa6\x9b\xbf\x00\x00\x00\xff\xff\x4f\x95\x65\x5c\xd6\x01\x00\x00")

func templatesSsl_certificateTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesSsl_certificateTf,
		"templates/ssl_certificate.tf",
	)
}

func templatesSsl_certificateTf() (*asset, error) {
	bytes, err := templatesSsl_certificateTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ssl_certificate.tf", size: 470, mode: os.FileMode(420), modTime: time.Unix(1508535618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/base.tf": templatesBaseTf,
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/lb_subnet.tf": templatesLb_subnetTf,
	"templates/ssl_certificate.tf": templatesSsl_certificateTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"base.tf": &bintree{templatesBaseTf, map[string]*bintree{}},
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"lb_subnet.tf": &bintree{templatesLb_subnetTf, map[string]*bintree{}},
		"ssl_certificate.tf": &bintree{templatesSsl_certificateTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

