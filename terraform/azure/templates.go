// Code generated by go-bindata.
// sources:
// templates/network.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/resource_group.tf
// templates/storage.tf
// templates/tls.tf
// templates/vars.tf
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x5d\x6a\xc5\x20\x10\x85\xdf\x5d\xc5\x30\xf4\x35\xd9\x41\x57\x52\x8a\x18\x9d\xb6\xd2\x44\xc3\xf8\xd3\xd2\xe0\xde\x8b\x21\xb9\x10\x6f\xc2\xbd\xbe\xfa\xcd\x78\xbe\x23\x53\xf0\x89\x35\x01\xaa\xbf\xc4\xc4\x93\xcc\x96\x63\x52\xa3\x74\x14\x7f\x3c\x7f\x23\xe0\xe0\xc3\x17\xc2\x22\x00\x9c\x9a\x08\x9a\xf3\x0a\xf8\xb2\x64\xc5\x3d\xb9\x2c\xad\x29\x5d\xc5\xbb\xec\x50\x00\x28\x63\x98\x42\x90\x61\x56\x9a\x6e\xfc\xdb\x36\xb0\xbd\x20\xb5\x35\x5c\xf0\x5d\x00\x8c\x5e\xab\x68\xbd\x3b\xdd\xbf\x5f\x96\xba\x79\xcf\x2d\x3f\xd9\xa7\x59\xae\xc1\x56\x72\xd7\x38\x02\x7d\x0d\xd5\x57\xaa\xa0\x28\x42\xdc\x6b\x87\x34\x38\x8a\x0f\x6d\x2f\x74\xc3\x41\x77\x66\xfa\xb0\xbf\xed\xc0\x51\xf7\xc2\xe1\x69\x09\x80\xe6\xa3\x4e\x3a\x68\x88\xa6\x84\xff\x00\x00\x00\xff\xff\xfe\x40\x76\xae\xfb\x01\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 507, mode: os.FileMode(480), modTime: time.Unix(1510681105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\xcd\x8e\xda\x30\x10\x80\xef\x7e\x8a\x91\xd5\xd3\x4a\xa0\x6d\x36\x59\x71\xd9\x43\x8f\xbd\xf7\x1e\x19\x7b\x12\xac\x06\x4f\x34\x76\xd8\xb6\xab\xbc\x7b\xe5\x84\xac\x80\x86\xd2\xa0\xb6\x52\x10\x5c\xf9\xe6\xcf\xf3\x69\x14\x46\x4f\x0d\x6b\x04\xa9\x7e\x34\x8c\xbc\xcd\x1d\x86\x57\xe2\xaf\xb9\x47\xdd\xb0\x0d\xdf\xf3\x92\xa9\xa9\x25\xc8\x35\xf9\x8d\x84\x37\x01\xe0\xd4\x16\xe1\xe4\xf7\x02\xf2\xc3\xdb\x4e\xf1\x12\xdd\x2e\xb7\xa6\x5d\x74\xb8\x00\xa8\x48\xab\x60\xc9\x8d\xc2\xc3\x9f\x6d\x24\x87\x5e\xfa\x8a\x79\x57\xa5\x23\x87\xd6\x8e\x81\x65\xac\xb0\x8c\x54\x2b\x85\x00\x08\xaa\xf4\x5d\x7b\x00\xe8\x76\x96\xc9\x6d\xd1\x85\x5f\x1a\x8b\x95\x5a\xd1\x0a\x31\x61\x74\x5d\x4c\x18\x5c\x17\x73\x1f\x9b\x9b\x0a\x25\x48\xff\xbb\x7d\x9f\x9b\xde\xf7\x5b\xaf\xd9\x52\xcc\x35\x1a\x92\x3c\x3e\x0a\x00\x63\x19\xf5\xe9\x13\xbd\x67\xfd\xec\xd6\xd4\x38\x13\x73\x29\xad\xd1\xfb\x73\xe5\x3f\x55\x15\xbd\xf6\x25\x29\x90\xa6\x6a\x1c\xfb\xa2\xeb\x08\xed\x5f\xb2\x26\x0e\x39\x2b\x57\xe2\x11\xf4\x10\x11\x83\x3e\x58\xd7\xed\xe7\x94\x7b\x01\x99\x24\x07\x69\x94\x31\x8c\xde\xe7\x35\x63\x61\xbf\x9d\x4f\x73\xc2\x0d\xc8\xd8\xe6\x8f\x1e\xf6\x0f\x0c\x00\x18\xb7\x76\xc4\xa3\x71\xf0\x28\xdb\x24\x3f\x62\xe0\x42\x95\xe8\xc2\x74\x4d\x0e\x62\x2f\xdb\xf2\x71\xb6\xb6\x3c\xaf\x9e\x57\x77\x5f\x0e\x7d\xe9\xf7\x48\x7c\xa5\x32\xef\xe1\x97\xad\x49\x66\x6b\x4d\x92\x65\x59\x76\xd7\x66\xaf\x8d\x71\x7e\xba\x2c\x31\xe8\xb2\x22\x4f\xff\x5d\x91\x87\xbf\x22\x48\xf6\x74\xb7\x63\x6f\x87\x66\x34\x9b\x66\x3d\xdd\x90\x21\xf0\xb2\x25\xe9\x6c\x0f\xc9\x6a\x95\xa6\x77\x53\x06\x53\x8a\xc5\x26\x84\xfa\x9f\x1d\x93\xf9\x7e\xa5\xa4\xe9\xcd\xdd\x13\x5d\x5c\xeb\x48\x45\xe5\x15\xc7\xa4\x8f\xbb\xe5\x8f\x92\xf4\xc6\x2d\xf9\x19\x00\x00\xff\xff\xc3\x49\xda\x6d\x0a\x11\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 4362, mode: os.FileMode(480), modTime: time.Unix(1510681105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x6e\xb3\x30\x10\x84\xcf\x3f\x4f\x61\xa1\xff\x4c\xa4\x48\x5c\x22\xf5\x59\x56\xc6\x6c\x12\x37\xc6\xb6\xd6\xbb\x34\x69\x94\x77\xaf\x28\x21\x8a\x45\xa1\xe9\x15\xcf\x7c\x33\x1a\x36\x08\x47\x61\x55\x36\x21\x1d\xc1\x23\x7f\x04\x3a\x81\xd7\x1d\x96\xea\x5a\x28\xd5\x6b\x27\xa8\xde\x54\xf9\xff\xaa\x3f\x85\x90\x3a\xe8\x2d\xb1\x68\x37\x89\xab\xc1\x59\x0d\x8e\x5b\x59\xdc\x8a\x22\x03\x26\x69\x3c\xf2\x3a\x6f\xd4\xac\x62\x08\x53\x10\x32\x08\x07\x0a\x12\xd7\x71\xb9\x76\xbd\x1d\x07\xd2\x07\x04\x6d\x4c\x10\xff\x5b\xcd\x5c\xbc\x0a\x6e\x71\xaf\xc5\x31\x24\x34\x42\x96\x2f\x63\x97\x45\xf4\x34\x7b\x2e\x5f\x4a\xc0\x33\x23\x79\xed\xc0\x2e\x13\xa3\x34\xce\x1a\xb0\x77\x88\x8d\xa0\xdb\x96\x30\xa5\x1c\xd5\x5a\x42\xc3\x81\xa6\xd7\x81\xf7\xef\x81\x3b\x32\xc7\xb4\xdb\x6c\x5e\xc1\xee\xb6\x75\x5d\xd7\xf3\x25\xfa\x2e\x41\x24\xdb\x6b\x46\x38\xe1\x65\x56\x98\x5d\xf6\x5e\x4d\xa6\xea\xe9\x23\x44\xec\x6e\x65\xa1\x54\x42\x9f\x2c\xdb\x7e\xf0\x32\x09\xfe\x9c\x36\x76\xfc\x5b\xd8\xc3\x03\x21\xa2\x4f\xe9\x38\xcb\xdb\x6b\x97\xb2\xc0\x77\xe9\x62\x13\xce\x20\xe4\xf2\xd9\x5e\x9b\x6b\x9b\x6d\x35\x5d\x80\xb1\x2d\xcd\x6a\xf7\x9a\xaa\x67\x41\xfe\x0f\xad\xbf\x9f\xc3\xa2\x37\x53\x7c\x9b\xbf\x02\x00\x00\xff\xff\xbf\xaa\xa0\xbb\xf5\x03\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 1013, mode: os.FileMode(480), modTime: time.Unix(1510681105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6a\xc5\x30\x0c\x44\xf7\x3e\xc5\x60\xba\x6d\x6e\xd0\xb3\x18\xc5\x11\xa9\x21\xb1\x83\x6c\x67\xd1\xe0\xbb\x17\x1b\xd2\x26\x24\xff\x7f\xf8\x5a\x8a\xd1\x68\xe6\x09\xc7\x90\xc5\x32\x34\xfd\x64\x61\x99\xcd\xbe\x31\xa3\x84\xbc\x68\xe8\x3e\xc4\x6f\x8d\x4d\x01\x9e\x66\x46\x9d\x2f\xe8\x8f\x6d\x25\xe9\xd8\xaf\xc6\x0d\xe5\xb3\x69\x14\x30\x05\x4b\xc9\x05\xff\xaf\xd8\x37\x45\x2b\x05\x24\x1a\x63\xb3\x02\xd8\xaf\x4e\x82\x9f\xd9\xa7\x8b\x5f\xb5\x2a\xaa\x28\x75\x8d\xb7\xe4\x7e\x72\xd6\xb8\x07\xc9\xee\xe6\x75\xda\xa7\x57\x87\x06\xc0\x99\x8e\x39\xff\x6d\x27\xf7\x1c\xbb\xfa\xb3\xab\xf2\x66\xf3\xd7\xc2\xd0\x30\x08\xc7\x68\x68\x3a\xb2\x8b\x89\x92\xb3\xef\x20\xfb\x0d\x00\x00\xff\xff\xe9\x3c\x7f\x17\xd1\x01\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 465, mode: os.FileMode(480), modTime: time.Unix(1508886658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorageTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x10\x3a\xfb\x06\x9d\xbb\x37\x07\x10\x68\x99\x70\x05\xc8\x92\x41\x52\x2e\xda\xc0\x77\x2f\xa4\xc6\x6e\x62\x20\x48\xc6\x6a\xe5\xe7\xff\x7c\x5f\x4c\x92\x0b\x7b\x02\x8b\xdf\x85\x89\x27\x27\x9a\x19\x47\x72\xe8\x7d\x2e\x49\x2d\xd8\x3e\xcb\x87\x85\xb3\x01\x48\x38\x11\x1c\xde\x2b\xd8\x97\xf3\x82\xdc\x49\x98\xe6\x48\x8e\xd2\xe2\xc2\xb0\x5a\x03\xb0\x99\xbb\x91\x73\x99\x5d\xdb\x6e\xf2\x2d\xeb\x56\xd0\xd5\xa0\xae\xaa\x56\x6b\x0c\x40\xcc\x1e\x35\xe4\xb4\xc5\x7c\x92\x68\x91\x6a\x7c\xb9\xcd\x69\x20\xae\x93\x93\x62\x1a\x90\x87\xeb\x19\xd3\x1c\xc3\xaf\x81\xd3\xaf\xb9\x25\xbf\xbd\x9f\x9a\xb3\xe2\x28\x0d\x08\x80\xd2\x12\x38\xa7\x89\x92\xfe\xa1\x5c\x31\xac\x66\x35\xe6\x7e\x4b\x3e\x27\xc5\x90\x88\x1f\xf6\xd4\x10\x9a\xe4\x4e\x33\xf0\x74\x37\x00\x87\x4f\xba\x18\xdc\xec\x1f\x24\x07\x83\xfd\xee\x3a\x27\x91\xbd\xa2\x99\xc3\x82\x4a\xf6\x79\x6c\x51\x9a\x3c\xc5\xf8\x00\x7d\x97\xfd\x6b\xfc\x3e\xe6\xbe\xb2\xff\x04\x00\x00\xff\xff\x34\x33\xd6\x54\x18\x03\x00\x00")

func templatesStorageTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorageTf,
		"templates/storage.tf",
	)
}

func templatesStorageTf() (*asset, error) {
	bytes, err := templatesStorageTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage.tf", size: 792, mode: os.FileMode(480), modTime: time.Unix(1510681105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTlsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4a\x2d\xce\x2f\x2d\x4a\x4e\x55\x50\x2a\xc9\x29\x8e\x2f\x28\xca\x2c\x4b\x2c\x49\x8d\xcf\x4e\xad\x54\x52\x50\x4a\xca\x2f\xce\x88\x2f\xcb\x2d\x56\x52\xa8\xe6\x52\x50\x48\xcc\x49\xcf\x2f\xca\x2c\xc9\xc8\x55\xb0\x55\x50\x0a\x0a\x76\x54\xe2\x52\x50\x28\x2a\x4e\x8c\x4f\xca\x2c\x29\x56\xb0\x55\x30\x31\xb0\x34\xe3\xaa\xe5\x02\x04\x00\x00\xff\xff\x2c\x7a\x83\xa0\x50\x00\x00\x00")

func templatesTlsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesTlsTf,
		"templates/tls.tf",
	)
}

func templatesTlsTf() (*asset, error) {
	bytes, err := templatesTlsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tls.tf", size: 80, mode: os.FileMode(480), modTime: time.Unix(1508886658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc4\x20\x10\x40\xef\x7e\xc5\x20\x3d\xa7\x4d\x29\xbd\xf5\x5b\xc2\x44\xa7\x30\xd4\x68\x18\x8d\x85\x86\xfc\x7b\x49\x52\xec\xae\x2b\xbb\x7a\x9b\xf7\xde\x61\x26\xa3\x30\x8e\x8e\x40\x93\xcf\x03\x5b\x0d\xeb\xa6\xd4\xff\xd4\x05\x83\x89\x83\xaf\xe7\x91\xa7\xd9\xd1\xd0\x8e\xe2\x32\x46\x23\x3c\xef\x61\x03\x27\xf2\xe8\x53\x03\x18\xc7\x74\x0f\x44\x32\x42\xa9\x86\x9e\xd2\x77\x90\xaf\xc1\xb0\x15\x0d\xab\x02\xb0\xf4\x89\x8b\x4b\xf0\x01\xba\x7f\xe9\x8e\xff\xdc\xbf\x6b\x75\x95\xb1\x4f\x24\x1e\xdd\x83\xee\xf5\xed\xe8\x66\x09\x99\x2d\x09\x68\xfc\x59\x84\x64\x3a\x8b\x6a\x53\xd8\xd3\xa7\x35\xa3\x74\x15\xd9\xb4\x02\x28\x8b\xc3\xdf\x2b\x76\x21\x87\x57\xee\x70\xe3\x15\x72\xe9\x9d\x67\x69\x79\x27\xd9\xf6\x0d\x7e\x03\x00\x00\xff\xff\x3e\x76\x2d\x25\xe9\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 489, mode: os.FileMode(480), modTime: time.Unix(1510681105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/network.tf": templatesNetworkTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf": templatesOutputTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/storage.tf": templatesStorageTf,
	"templates/tls.tf": templatesTlsTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage.tf": &bintree{templatesStorageTf, map[string]*bintree{}},
		"tls.tf": &bintree{templatesTlsTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

