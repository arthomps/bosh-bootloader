// Code generated by go-bindata.
// sources:
// templates/bosh_director.tf
// templates/cf_dns.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/jumpbox.tf
// templates/vars.tf
// DO NOT EDIT!

package gcp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBosh_directorTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xd1\x72\xa2\x30\x14\x86\xaf\xe5\x29\xce\x64\xf6\xb2\xba\x96\x05\xf5\xa6\x4f\xb2\xe3\x64\x02\x1e\x59\xb6\x91\xc3\x84\xa0\x9d\xe9\xf8\xee\x3b\x21\x04\xb0\x2a\x1b\x6d\x9d\x4e\x2f\xa0\xf8\xff\x7f\x4e\xbe\x9c\x03\x54\xeb\xb2\xd6\xc0\x0a\xd4\x07\x52\xaf\xbc\x10\x3b\x64\xf0\x1e\x00\x00\xec\x85\xac\x11\x5e\x80\xfd\x78\xcf\x88\x32\x89\x3c\xa5\x5d\x59\x6b\xe4\xad\x7a\x96\x24\x72\xea\xee\x8d\xf3\xc8\x82\x63\x10\xb8\xcc\xaa\x4e\x6e\x8b\xed\x0d\x4d\xb2\xfd\xf7\x42\x70\x42\xd5\x1f\x4e\x25\x16\x5c\x8b\xcc\x33\x7b\x9b\x2b\x3c\x08\x29\x67\xc6\x3c\x35\xe6\x6b\xc1\x9b\x5c\x61\xaa\x49\x9d\x84\x4f\x7c\x93\x9d\xfb\x42\xfa\xdf\x7a\x57\x26\xf4\x76\x35\x77\x2f\xd4\x0c\x8b\x3d\xcf\x37\xc7\x69\xab\x3d\xf1\xe7\x85\x46\x55\x08\x79\xcf\xae\x9d\x77\x50\x96\xc2\x8a\x6a\x95\x22\xb0\xcb\xa7\xcb\x80\x0d\xce\xd7\xae\x65\xdc\x93\xc9\x79\xb9\x4e\x14\x00\x88\x5a\x13\x4f\x15\x8a\x93\x03\xad\xe0\x05\xb6\x42\x56\x38\xba\x72\xaf\x6f\x17\xb7\x0f\x86\x6b\x4f\xce\xd6\x6e\x35\x01\x40\x5e\xf2\x34\xdf\x28\xae\x44\x91\x35\x3c\x9e\xe7\xb3\xe6\xef\xe7\xf3\xc2\xfc\xde\x66\xb7\x19\x1e\x3d\x5d\xa1\xdc\x72\x99\x17\xaf\xff\x21\xe6\x30\x33\x60\xf8\x66\x41\xf7\x35\x9b\x13\x3a\x2b\xba\x93\xf5\x65\xdd\x3a\x69\x01\x80\x2d\xc7\xee\xd7\x10\xfe\xcd\xdc\x86\xe7\x6c\x6d\x04\x42\x4a\x3a\xb4\x5d\x52\x92\xd2\x56\x14\x86\xec\x09\xd8\x62\xb5\x58\x99\x6b\x18\xc7\x71\xcc\xd6\x56\xa3\x48\x53\x4a\xd2\xd4\xa2\xd3\xd2\x54\x77\x34\x39\x5a\xa8\x0c\xb5\x69\x3c\x9b\x70\xba\x99\x6e\xa4\xd8\xda\x17\x53\x6f\x19\xe7\xd4\xeb\xbe\x02\x94\x47\xfd\x9e\xd0\x56\x51\xf4\xab\xb9\xae\xa2\xe8\x0b\x21\xba\xb7\xc7\x8d\x20\x3b\x9b\x07\xcc\x4e\xfb\x68\xa0\x83\xbd\x7c\x84\x7a\x17\x20\xf7\x0a\xf3\x67\xe3\x1c\x53\x4d\xbe\x88\x2e\x5a\x1e\x48\x6a\xb0\xa9\xab\x9d\x17\x85\xb6\xf7\xc2\x38\x8c\xe7\xf6\x66\xb9\x5c\x7e\x47\xb3\xb5\x5f\x25\x03\xa7\x79\x30\x8a\xf2\x83\xf8\x81\x10\xdd\xc7\x72\x7c\x7a\x3f\xc3\xab\x3b\xa6\xa7\xf1\x99\xba\xb9\x35\x3d\xdb\xf1\x9b\x5a\x70\xc0\x2a\x4f\x77\x3d\x2c\x9f\x61\xbe\xa6\xa9\x37\x77\x0d\xfc\xbf\x00\x00\x00\xff\xff\x79\x21\x66\x2d\xa9\x0a\x00\x00")

func templatesBosh_directorTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBosh_directorTf,
		"templates/bosh_director.tf",
	)
}

func templatesBosh_directorTf() (*asset, error) {
	bytes, err := templatesBosh_directorTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/bosh_director.tf", size: 2729, mode: os.FileMode(420), modTime: time.Unix(1508537102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x41\x8f\x9b\x30\x10\x85\xef\xfc\x8a\x91\xd5\x53\xa5\xa0\x95\x7a\xce\xa1\x52\xcf\xbd\xf4\x58\x45\xc8\xb1\x27\x04\xc9\xd8\xd6\xcc\x40\x9a\xae\xf8\xef\x95\x09\x10\xd2\x2e\x6a\x38\x64\x95\xc3\x72\x01\xcc\xf3\xbc\x37\x9f\x11\xa6\xd5\x54\xe9\xbd\x43\x50\x7c\x66\xc1\xba\xb0\xa1\xd6\x95\x57\xf0\x9a\x01\xc8\x39\x22\x6c\x41\xb1\x50\xe5\x4b\x95\x75\x59\x46\xc8\xa1\x21\x83\xa0\xca\x10\x4a\x87\x85\xf5\x5c\xd4\xda\xeb\x12\x6d\xf1\x3b\x78\x54\xa0\xd0\xb7\xfd\xf0\xe5\x36\x15\xf2\xba\x46\x18\x8e\x2d\xa8\x4f\xaf\xad\xa6\x3c\xc9\x2a\xdb\x6d\x7a\x59\x06\x90\xa6\x8c\xc2\x49\x74\x93\xaa\xcb\x7b\x1d\xb2\xa1\x2a\x4a\x15\x7c\xd2\x7d\xfb\xfe\x03\x52\x09\x38\x04\x02\x39\x22\xdc\x54\x07\xf4\x6d\x45\xc1\xd7\xe8\xa5\x6f\x20\x34\x12\x1b\xf9\xab\xdd\x3e\x2e\x23\xb5\x48\x7c\x49\xdc\x6a\xd7\xe0\x25\xc6\x42\xa3\xf9\xbc\xcd\x3c\x05\x1f\x2b\x74\xcb\xa4\x08\x4d\x20\x5b\x30\x8a\x02\x75\xaa\x9c\x35\x9a\xec\xc6\x7a\xfe\x87\xd3\x16\xd4\xe7\xfc\x4e\xf3\x91\x5c\x77\xc1\x13\xd1\x5b\x2e\x7a\x3a\x3f\x47\x73\x13\xea\xd8\x08\x16\xa5\x0b\x7b\xed\x0a\x6d\x2d\x21\x73\x6e\x0e\x9b\xe1\x52\xed\xc6\x05\x9f\xfc\xbf\xa6\x72\x22\xee\xba\x72\x5f\x5e\x5e\xb2\x0c\x60\x9e\x64\x25\xa3\x4e\xa5\x02\x44\x56\x8b\xe6\x3e\xe0\x34\xf9\xbf\x11\xf3\xe1\xdc\xa9\xdd\x7d\x80\xcd\x61\xc3\x7c\xdc\x44\x0a\xbf\xce\x6f\x01\x66\x3e\x3e\x00\xf1\x2c\xf8\xd5\xfd\x69\xe8\xbe\x95\x6e\x35\x58\x31\x71\xe9\xa5\x15\x13\x1f\xcb\x34\x79\x53\x68\x04\xe9\x29\xa1\x5e\xe3\xad\xa6\x6a\x43\x8c\x0e\x69\x89\xec\xf0\xf8\xb1\x74\x4f\x4f\xf4\x21\xb8\x89\xb5\x9a\xa6\x0b\x65\x49\x58\x6a\x09\x8b\x44\x67\x92\x0f\xaa\x2b\xf7\xac\x13\x2f\x6f\x5b\x27\xfe\xc0\x79\xe7\x0e\x45\x68\x8f\xcd\x7e\x86\x71\x3b\x0d\x3e\x92\xe1\x60\xbb\x9b\xfd\xe4\x4d\xfc\xde\x1b\xdc\xd0\xed\x0d\xba\x3f\x01\x00\x00\xff\xff\xea\xd9\xbe\x05\x97\x0a\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 2711, mode: os.FileMode(420), modTime: time.Unix(1508537102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4b\x8f\xdb\x36\x10\x3e\xd7\xbf\x62\x20\xe4\xd0\x00\x91\x23\x6b\xb7\xa9\x73\xd8\x53\x51\xa0\xa7\x34\x40\x73\x0b\x02\x81\x92\x46\x36\xb1\x5c\x51\x25\x29\x3b\xee\x62\xff\x7b\xc1\x87\x6c\xc9\x7a\xdb\x0e\xf2\x3a\xac\xd7\xe4\x7c\x1c\x7d\xf3\xe0\x47\x6a\x77\x44\x50\x12\x33\x04\x4f\x4a\x16\x25\x28\x14\xcd\x68\x42\x14\x7a\xf0\xbc\x00\x50\x87\x02\xe1\x01\x3c\xa9\x04\xcd\x37\xde\xe2\x65\xb1\xe8\xb5\x88\x0a\x41\x77\xfa\xe7\x23\x1e\x26\x58\x93\x1d\xa1\x8c\xc4\x94\x51\x75\x88\xfe\xe3\x39\xca\xa6\x11\xa3\x52\x19\x13\x5e\xaa\xa2\x54\xe0\x09\x5e\x2a\x14\x51\x4c\x92\x47\xcc\xd3\x48\xa2\xd8\xd1\xc4\xf9\xb9\x23\xac\x34\x56\xaf\x9e\x37\x9c\x6f\x18\x46\x09\x7f\x2a\x4a\x85\xe7\xd3\x97\x16\xc5\x67\xb1\xef\x46\xfc\x6a\x24\x27\x4f\xf8\xd2\xb5\x22\x8b\x23\x5a\xd8\x75\x86\x56\xda\x30\x1e\x13\x16\x91\x34\x15\x28\xe5\x32\xc9\xfc\xea\xa3\xfb\xd9\x04\x97\x72\x1b\x15\x82\x7f\x3d\x4c\xc5\xaf\x01\x4b\xb9\xf5\x8d\x6d\x37\xb4\x4a\x8a\x68\x9e\xef\x35\x6c\x95\x14\xbe\x35\xee\x06\xdf\xcb\x0b\x40\xf7\x3d\x24\x24\x02\xd3\x6d\x19\xcf\x46\xb4\x66\x4d\x4c\x81\x92\x97\x22\x41\xf0\xce\xac\x32\x2a\x70\x4f\x18\xf3\xc0\xab\x3e\xfa\x49\x66\x57\xd3\x41\x07\xfb\xcf\x2c\xb8\x23\x62\x89\xf9\x2e\xa2\xe9\x8b\x9f\x64\x3e\x2f\x30\xf7\x16\x00\x29\x16\x98\xa7\x32\xe2\x39\x3c\xc0\xe7\xf3\x05\x72\x54\x7b\x2e\x1e\x97\x71\xcc\x7c\xf7\xd9\xfb\xa2\xc1\xed\xe7\x23\xf8\xb8\x59\x95\x84\x0b\x00\xc2\x18\xdf\x3b\x46\x0a\xc1\x15\x4f\x38\xd3\x30\x2a\x29\x3c\xfb\x25\x17\x4a\x5a\xec\xcf\xde\x3a\xf0\xde\x80\x77\x7f\x7f\x67\x16\x7e\xd1\x00\x96\x8d\x48\x90\x7c\x83\xd2\x4c\x0a\x96\xe6\xff\xdb\xc0\xfb\xa2\x27\x28\x22\x36\xa8\x22\x45\x36\x76\xf8\xea\xda\xf9\x32\x18\x86\x66\x7d\x78\xe0\x9d\x2a\xa4\x16\x8b\x8e\x28\x0c\x47\xd7\xc1\x66\x5c\xec\x89\x48\x69\xbe\x89\x44\xc9\xd0\xc2\x6f\x95\x2a\xfc\xd3\x88\x6f\x47\x26\xc4\x5d\x1b\x6a\x96\x69\x51\xf9\x7b\x71\xc9\x57\x3c\x43\x5f\x1a\xb8\x30\xe8\x25\x6d\x43\x58\x56\x9e\xb3\xd8\x55\xb9\x44\x96\x45\x8c\xe6\x8f\x06\x4f\x07\xde\x86\x55\xe3\xad\x83\xeb\xf8\x91\x17\x13\x24\xbf\x03\x43\xb2\x49\x91\x9c\xc6\x91\xae\x8b\x41\x92\x5a\x31\xa8\xe5\x4f\xb5\x42\x8b\x97\x36\x31\x66\xbe\x9d\x6c\x9a\x86\x4c\x04\x2d\x14\x35\x5d\xc3\x13\x48\x18\x3b\x00\x01\xc6\x49\x0a\x31\x61\x24\x4f\x50\x40\x5c\x2a\xd0\x7b\x1d\xa6\x40\x24\x90\x1c\x34\x08\x1c\x41\x4a\xc1\xa2\x27\x52\xf4\x72\xe3\xc6\x1b\x84\x94\x82\xf9\xfa\xbb\x3a\x25\x13\x9f\x5e\x9e\x3f\xbe\x1c\x78\xfe\x7e\x12\x64\x37\x0b\x95\xc1\x1c\x2a\x64\x37\x17\x57\x13\x02\x70\xa6\x5f\x7a\x9a\xe0\xd9\x2c\x8d\xab\x7f\xad\x63\x0d\xf7\xbd\x96\xb0\xf2\x1c\xc4\x89\xd0\xa8\x10\x98\xd1\xaf\x2d\x2e\x3b\xb2\xa8\x94\x28\x34\x23\x3b\x9a\x62\xaa\x1f\x01\x9c\xec\x82\x47\x3c\xc0\x5b\xf3\x4d\x6d\x35\x28\x08\x15\xa6\x20\x4e\xe2\xcc\x2e\x93\x51\x86\xbf\xea\xb5\x06\x64\xdc\x6b\xe3\x41\x1d\x6e\xd0\xd4\x4e\x67\x34\xc3\xe4\x90\x30\x84\xe7\xc5\x2f\x89\x40\x8d\x15\x63\xc6\x05\x46\x29\x4a\x25\xb8\x76\x40\x89\x12\xcd\x46\x35\xc4\x9c\x0b\xe5\x59\x32\xba\x60\x0e\xef\x19\xae\x83\x1b\xfe\x32\x52\x32\x55\x6d\x62\x57\x8a\xc4\xa9\x25\xb5\x45\xc2\xd4\x36\x4a\xb6\x98\x3c\x5a\xff\x8b\x32\x66\x34\xf1\xed\x80\xef\x06\x3a\x2b\xaa\xa7\xe5\x5a\x00\xf3\x4c\xa6\x4f\xd5\x97\xd0\x54\xdb\xa6\xd7\x46\x5a\x07\xeb\x40\x8f\x0a\xfc\xb7\x44\xa9\xa2\x82\xa8\x6d\x6d\x9d\xb7\x16\xc7\x1b\x8d\x46\x6b\xd1\xdb\x3c\x57\xd5\xad\x7b\x1c\x1f\xf7\x7b\xa2\xf4\xd3\x39\x31\xe4\x63\x67\x12\xd5\x0d\x7e\x0e\x19\x68\x85\xe0\x3a\x18\xd2\x81\xab\xbb\x60\x19\xae\x56\x46\x0b\x86\xa1\x9e\x7f\xf7\xdb\x72\xf5\xde\x7e\xb1\x7a\x67\x4c\xeb\xe2\x10\x6e\x28\x0f\xdb\xc7\x1f\xb7\x52\xc1\x39\x1b\x3b\xcc\xd5\xa6\x36\x8f\x41\xa7\xb3\x5b\x6f\x2a\x34\x74\xe7\xd1\x72\xa4\x8b\x9c\xe6\xcd\x48\xb3\x2e\xf0\xfe\x1c\x3b\xce\xfe\x79\x0e\x1b\x61\x18\x86\xa7\xfc\x1a\x3d\x46\x8c\x44\x6d\x78\xf7\x6c\x64\xc7\x85\xa1\xd3\x45\x80\x52\x52\x9e\x47\x24\xcb\x68\x4e\x95\xd9\x03\x3f\xfc\xfd\xe1\xcf\x91\xb8\x76\x89\xe6\xfe\xf0\x8e\xf9\xd1\x10\xba\xf3\x12\xbc\x57\xdd\x6a\x18\x13\x0f\xab\xc5\xeb\xc1\xfb\xf4\xc7\xc7\x33\x85\x7e\xbb\x7b\x85\xcb\x8b\xb6\x76\xbf\x30\xa1\x6a\x9b\x95\x75\xb2\x9d\x54\x5a\xb5\xe9\x3f\x43\x59\xad\x82\xf0\xde\xbf\x0b\x7f\x7f\xb7\xbe\xbc\xb8\x5a\xec\x0e\x57\x57\xa3\x29\x76\xb2\x3b\xc6\xeb\x05\x8a\x61\x20\x8a\x83\x02\xa8\x19\xce\x3e\xcd\x70\xa5\x62\x68\xf5\x9b\x8b\x58\x19\xec\x38\x5a\xc0\xd5\x48\x31\x81\x35\xd9\xd0\x8e\x6e\x8b\xc1\xce\x18\xbf\x59\x00\x0c\xc7\xb9\xb3\x91\x0d\xc5\x61\x9c\xff\x99\xad\xac\xe6\xf4\x60\x2f\xab\x15\xc1\x2d\x3a\xda\x84\xdb\xcc\xcb\x5b\xd9\x5e\xce\x16\x1e\xfb\x91\xbb\x2e\x3d\x61\x5e\x7e\x4e\x42\x9c\x9d\x8f\x13\x53\xb1\x43\xfc\x4f\xea\x3b\x9d\xf9\xb8\x97\xee\x5a\x69\x52\x36\x1e\x67\xcf\xcf\xc5\xbd\x1c\xce\x41\x73\x5d\x74\x83\xe4\x3b\xbf\xf5\xbe\x88\x8e\x59\x6c\x7c\x03\x32\xd6\xc1\x37\xe1\xe2\xfc\x0d\xc0\xa5\x55\xe8\xde\x04\xb4\x5f\xde\x9c\x01\xeb\x1d\x74\x0c\xb8\x12\x1b\x47\xd4\x9a\xed\x0c\x9d\x62\x8d\x9b\x71\x6b\xc7\xcc\xce\x3a\x8a\xfe\x4a\x67\xcc\x14\x19\xb3\x0f\x88\xeb\xfb\x7b\xa7\x2e\xe6\x8a\x8b\x06\xd3\x93\x65\x45\x8b\x8c\x3e\x26\x66\xb5\xbd\x19\xa8\x37\xd4\xfe\x5d\x81\x1d\x0a\xee\xec\x6a\x74\x14\x0f\xd7\xa3\x8e\xe0\xf5\x15\x39\xeb\x0d\x5a\xeb\x9d\xab\xd7\x7b\xd6\x9f\xc0\xce\xd1\xf6\xf8\x74\x6e\xfa\x03\x78\xc7\x96\x7e\x7c\x36\xfb\xfd\x5f\x9f\x3e\x7d\xfc\xc7\xf0\x49\x9f\x90\x97\x2a\x92\x98\xc0\x03\xbc\x0f\xb4\xde\xc3\x9c\xc4\xda\xdb\x34\xd7\x73\x33\xc2\x24\x2e\x00\x9c\x63\xae\x34\x36\x82\x97\x45\x27\x25\x34\x97\x8a\xe4\x09\x46\x66\x4a\xed\x16\x23\x38\x0b\xc4\xcb\x2d\x40\x57\xdf\x02\x34\xec\x00\x9d\xb2\xa5\x4f\xd8\xcd\x27\x5f\x73\x37\x9d\x6b\xa4\x48\x30\x27\x29\xfc\xc0\x7f\xf5\x8c\x0c\x9f\x30\x57\xe6\x92\xb9\xfd\x87\x02\x6f\x20\x78\xdd\x75\x37\xae\x50\x08\x92\x71\xf1\x04\x1b\xcc\x51\x10\x85\x29\x54\x6e\x39\x5a\xd5\x96\x28\xa0\x12\x9e\x4a\xa6\xa8\xaf\xd1\x20\xe3\xc2\xbd\x68\x60\x9c\xa4\xf6\x65\x84\xf9\x73\x05\x00\x33\x5e\xf7\x78\x92\x5f\xee\x51\xd3\xc8\x1c\x51\x6c\x50\xab\x26\x75\xcc\x6f\x77\x80\x39\xa9\x8d\xe1\xcb\xd7\x01\x76\x57\xb3\xd8\x5d\x4d\x60\x77\xf5\x83\xb2\xbb\xfa\x0e\xec\x86\xb3\xd8\x0d\x27\xb0\x1b\xfe\xa0\xec\x86\xd7\xb1\xfb\x7f\x00\x00\x00\xff\xff\x7d\x6d\xce\x6f\x4a\x24\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 9290, mode: os.FileMode(420), modTime: time.Unix(1508968546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x3f\x8f\xdc\x20\x10\xc5\xeb\xf0\x29\x46\xa3\x94\xc1\x85\x73\x6d\xaa\x28\xed\x25\x45\xba\xe8\x84\x58\x7b\xec\x45\xc7\x31\x08\xf0\x5a\xd1\xc9\xdf\x3d\xc2\x66\xbd\xbe\xdc\x9f\x5d\x69\xb5\x95\x47\xe3\xc7\x63\xf8\x3d\xe0\x21\xf9\x21\x01\x36\xec\x1a\x1e\x42\x24\x95\x74\xe8\x29\x29\xcf\x6c\x11\x9e\xc5\xa7\x83\xb6\x03\xc1\x37\xc0\xcf\xcf\x3d\x73\x6f\x49\x35\xfc\xe4\x87\xf4\x42\x59\x2d\xb5\x9c\x6b\xa7\x9f\x68\x42\x31\x09\xf1\xda\xdd\xee\x94\xf1\xd9\x17\x00\xe0\x7d\x6b\xdd\xb6\x81\x62\xac\xd6\x85\xf2\xd8\x29\xdf\xc5\x3f\x50\xe4\x21\x34\x04\xf8\xdf\xfa\xce\x04\x1a\xb5\xb5\x08\x78\x2c\xe5\xea\xb5\x6c\x9f\xa7\xcc\x43\xcc\xdb\x1f\x74\xa8\xc8\x1d\x94\x69\xa7\x93\x4e\xb2\x27\x87\x59\x4a\x69\xe4\xf0\xf8\xe6\xa4\xe5\x5f\xb5\xdb\x59\x79\xac\x0b\x00\x01\xa0\xad\xe5\xb1\x9c\xd6\x07\x4e\xdc\xb0\xcd\x36\xa9\xf1\xb8\x34\x39\xa4\xb8\x8c\xf1\x07\xef\xee\xbe\xe2\x17\xc0\xba\xae\x6b\x7c\x10\x00\x53\xb6\x28\x94\x93\xee\xe3\x2c\x3a\x1d\xe3\xe1\x43\x04\x05\x14\x6e\xe8\xcb\xb5\xb7\x02\x78\xff\xf4\x1f\x03\x7e\x71\x4b\x70\x93\xfe\x85\xde\x02\x20\x52\x8c\x86\x9d\xd2\x5d\x67\x9c\x49\x7f\xb3\xfe\xfe\xe7\xfd\x8f\x33\xc9\x72\x18\x75\x68\x8d\xeb\x55\x18\x2c\x21\x60\x8c\x7b\x79\xea\xca\xa5\xbb\x4d\xf8\x4c\xca\x31\xee\x71\xe5\xbc\x51\x5f\x78\xdb\x23\xd9\x4e\x59\xe3\x1e\xa7\xec\x92\xf3\x54\x41\xbb\x9e\x66\x97\x39\x4a\x01\x60\xbc\xda\xc6\xff\xfb\xfb\xaf\xd2\x2d\x89\xbc\xbd\xe5\xd5\xaf\xe0\x15\xab\x7d\x4a\x3e\x5e\x45\x6b\x76\xb8\x19\xaf\xfc\x02\x6e\x8c\xeb\x5f\x00\x00\x00\xff\xff\x5c\xc2\x73\xd4\xf2\x04\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 1266, mode: os.FileMode(420), modTime: time.Unix(1508535618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJumpboxTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\xc1\x8a\x83\x30\x10\x06\xe0\xf3\xe6\x29\x86\xb0\x57\x15\x84\x5c\x84\x7d\x96\x90\x35\x83\xb5\x44\x13\x26\x33\x22\x88\xef\x5e\x4a\xad\x56\xe8\xa5\xbd\x86\xfc\xdf\xff\x0f\x61\x8e\x42\x2d\x82\xee\x62\xec\x02\xda\x36\x0e\x49\x18\xad\xf3\x9e\x30\x67\x0d\xfa\x2a\x43\xfa\x8f\x73\xd1\x27\x0d\x8b\x02\x18\xdd\x80\xf0\x07\xfa\x77\x99\x1c\x95\x38\x4e\xb6\xf7\x6b\xf1\xf2\x4b\xad\x4a\x45\xe1\x24\xbc\x87\xad\x50\x78\xa4\x01\x26\x17\x64\x03\xde\x77\x96\x87\x55\x6e\x4f\x6b\x53\xd7\x27\x17\x67\x46\x1a\x5d\xb0\xcf\x55\x5f\xba\x27\xd4\xf7\x84\x2d\x47\x3a\x8e\x5f\xd4\xcf\xce\x5e\x98\x53\x6e\xaa\xea\xb3\xd9\xc6\x18\x73\x2f\xb9\x05\x00\x00\xff\xff\xb2\xf6\x55\xa8\x69\x01\x00\x00")

func templatesJumpboxTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesJumpboxTf,
		"templates/jumpbox.tf",
	)
}

func templatesJumpboxTf() (*asset, error) {
	bytes, err := templatesJumpboxTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jumpbox.tf", size: 361, mode: os.FileMode(420), modTime: time.Unix(1508537102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\x41\x0a\xc3\x20\x10\x05\xd0\x75\x3c\x85\x0c\x59\xb4\x9b\xde\xa0\x67\x29\x36\x99\xca\x14\x99\x91\x89\x08\xad\x78\xf7\x22\x16\xcc\xa6\xa4\x4b\xf9\x4f\x3e\xf3\xb3\x53\x72\xf7\x80\x16\xa2\xca\x13\x97\x74\xa3\x15\x6c\x31\x53\x7a\x45\xb4\x57\x0b\x5b\x52\x62\x0f\xa6\x1a\x33\xac\xa2\x27\xe1\x63\xf7\x16\xc6\x63\x85\x9c\xff\x6a\x5d\x14\x57\xe4\x44\x2e\x6c\xbf\x70\x54\xc9\xb4\xa2\x5a\xf0\x22\x3e\xf4\xf2\xdd\xbf\xc6\xe7\xf2\xa0\x80\x27\x98\x4b\x76\x7a\xd9\x85\x15\xce\x15\xcc\xf4\x1d\xa2\xd3\x46\xc6\x32\x2d\xee\xb7\x8f\xb4\xbf\x6b\xab\xff\x04\x00\x00\xff\xff\x39\xda\x2a\x22\x4d\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 333, mode: os.FileMode(420), modTime: time.Unix(1508535618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/bosh_director.tf": templatesBosh_directorTf,
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/jumpbox.tf": templatesJumpboxTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"bosh_director.tf": &bintree{templatesBosh_directorTf, map[string]*bintree{}},
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"jumpbox.tf": &bintree{templatesJumpboxTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

