// Code generated by go-bindata.
// sources:
// templates/bosh_director.tf
// templates/cf_dns.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/jumpbox.tf
// templates/vars.tf
// DO NOT EDIT!

package gcp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBosh_directorTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xd1\x72\xa2\x30\x14\x86\xaf\xe5\x29\xce\x64\xf6\xb2\xba\x96\x05\xf5\xa6\x4f\xb2\xe3\x64\x02\x1e\x59\xb6\x91\xc3\x84\xa0\x9d\xe9\xf8\xee\x3b\x21\x04\xb0\x2a\x1b\x6d\x9d\x4e\x2f\xa0\xf8\xff\x7f\x4e\xbe\x9c\x03\x54\xeb\xb2\xd6\xc0\x0a\xd4\x07\x52\xaf\xbc\x10\x3b\x64\xf0\x1e\x00\x00\xec\x85\xac\x11\x5e\x80\xfd\x78\xcf\x88\x32\x89\x3c\xa5\x5d\x59\x6b\xe4\xad\x7a\x96\x24\x72\xea\xee\x8d\xf3\xc8\x82\x63\x10\xb8\xcc\xaa\x4e\x6e\x8b\xed\x0d\x4d\xb2\xfd\xf7\x42\x70\x42\xd5\x1f\x4e\x25\x16\x5c\x8b\xcc\x33\x7b\x9b\x2b\x3c\x08\x29\x67\xc6\x3c\x35\xe6\x6b\xc1\x9b\x5c\x61\xaa\x49\x9d\x84\x4f\x7c\x93\x9d\xfb\x42\xfa\xdf\x7a\x57\x26\xf4\x76\x35\x77\x2f\xd4\x0c\x8b\x3d\xcf\x37\xc7\x69\xab\x3d\xf1\xe7\x85\x46\x55\x08\x79\xcf\xae\x9d\x77\x50\x96\xc2\x8a\x6a\x95\x22\xb0\xcb\xa7\xcb\x80\x0d\xce\xd7\xae\x65\xdc\x93\xc9\x79\xb9\x4e\x14\x00\x88\x5a\x13\x4f\x15\x8a\x93\x03\xad\xe0\x05\xb6\x42\x56\x38\xba\x72\xaf\x6f\x17\xb7\x0f\x86\x6b\x4f\xce\xd6\x6e\x35\x01\x40\x5e\xf2\x34\xdf\x28\xae\x44\x91\x35\x3c\x9e\xe7\xb3\xe6\xef\xe7\xf3\xc2\xfc\xde\x66\xb7\x19\x1e\x3d\x5d\xa1\xdc\x72\x99\x17\xaf\xff\x21\xe6\x30\x33\x60\xf8\x66\x41\xf7\x35\x9b\x13\x3a\x2b\xba\x93\xf5\x65\xdd\x3a\x69\x01\x80\x2d\xc7\xee\xd7\x10\xfe\xcd\xdc\x86\xe7\x6c\x6d\x04\x42\x4a\x3a\xb4\x5d\x52\x92\xd2\x56\x14\x86\xec\x09\xd8\x62\xb5\x58\x99\x6b\x18\xc7\x71\xcc\xd6\x56\xa3\x48\x53\x4a\xd2\xd4\xa2\xd3\xd2\x54\x77\x34\x39\x5a\xa8\x0c\xb5\x69\x3c\x9b\x70\xba\x99\x6e\xa4\xd8\xda\x17\x53\x6f\x19\xe7\xd4\xeb\xbe\x02\x94\x47\xfd\x9e\xd0\x56\x51\xf4\xab\xb9\xae\xa2\xe8\x0b\x21\xba\xb7\xc7\x8d\x20\x3b\x9b\x07\xcc\x4e\xfb\x68\xa0\x83\xbd\x7c\x84\x7a\x17\x20\xf7\x0a\xf3\x67\xe3\x1c\x53\x4d\xbe\x88\x2e\x5a\x1e\x48\x6a\xb0\xa9\xab\x9d\x17\x85\xb6\xf7\xc2\x38\x8c\xe7\xf6\x66\xb9\x5c\x7e\x47\xb3\xb5\x5f\x25\x03\xa7\x79\x30\x8a\xf2\x83\xf8\x81\x10\xdd\xc7\x72\x7c\x7a\x3f\xc3\xab\x3b\xa6\xa7\xf1\x99\xba\xb9\x35\x3d\xdb\xf1\x9b\x5a\x70\xc0\x2a\x4f\x77\x3d\x2c\x9f\x61\xbe\xa6\xa9\x37\x77\x0d\xfc\xbf\x00\x00\x00\xff\xff\x79\x21\x66\x2d\xa9\x0a\x00\x00")

func templatesBosh_directorTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBosh_directorTf,
		"templates/bosh_director.tf",
	)
}

func templatesBosh_directorTf() (*asset, error) {
	bytes, err := templatesBosh_directorTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/bosh_director.tf", size: 2729, mode: os.FileMode(420), modTime: time.Unix(1508537102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x41\x8f\x9b\x30\x10\x85\xef\xfc\x8a\x91\xd5\x53\xa5\xa0\x95\x7a\xce\xa1\x52\xcf\xbd\xf4\x58\x45\xc8\xb1\x27\x04\xc9\xd8\xd6\xcc\x40\x9a\xae\xf8\xef\x95\x09\x10\xd2\x2e\x6a\x38\x64\x95\xc3\x72\x01\xcc\xf3\xbc\x37\x9f\x11\xa6\xd5\x54\xe9\xbd\x43\x50\x7c\x66\xc1\xba\xb0\xa1\xd6\x95\x57\xf0\x9a\x01\xc8\x39\x22\x6c\x41\xb1\x50\xe5\x4b\x95\x75\x59\x46\xc8\xa1\x21\x83\xa0\xca\x10\x4a\x87\x85\xf5\x5c\xd4\xda\xeb\x12\x6d\xf1\x3b\x78\x54\xa0\xd0\xb7\xfd\xf0\xe5\x36\x15\xf2\xba\x46\x18\x8e\x2d\xa8\x4f\xaf\xad\xa6\x3c\xc9\x2a\xdb\x6d\x7a\x59\x06\x90\xa6\x8c\xc2\x49\x74\x93\xaa\xcb\x7b\x1d\xb2\xa1\x2a\x4a\x15\x7c\xd2\x7d\xfb\xfe\x03\x52\x09\x38\x04\x02\x39\x22\xdc\x54\x07\xf4\x6d\x45\xc1\xd7\xe8\xa5\x6f\x20\x34\x12\x1b\xf9\xab\xdd\x3e\x2e\x23\xb5\x48\x7c\x49\xdc\x6a\xd7\xe0\x25\xc6\x42\xa3\xf9\xbc\xcd\x3c\x05\x1f\x2b\x74\xcb\xa4\x08\x4d\x20\x5b\x30\x8a\x02\x75\xaa\x9c\x35\x9a\xec\xc6\x7a\xfe\x87\xd3\x16\xd4\xe7\xfc\x4e\xf3\x91\x5c\x77\xc1\x13\xd1\x5b\x2e\x7a\x3a\x3f\x47\x73\x13\xea\xd8\x08\x16\xa5\x0b\x7b\xed\x0a\x6d\x2d\x21\x73\x6e\x0e\x9b\xe1\x52\xed\xc6\x05\x9f\xfc\xbf\xa6\x72\x22\xee\xba\x72\x5f\x5e\x5e\xb2\x0c\x60\x9e\x64\x25\xa3\x4e\xa5\x02\x44\x56\x8b\xe6\x3e\xe0\x34\xf9\xbf\x11\xf3\xe1\xdc\xa9\xdd\x7d\x80\xcd\x61\xc3\x7c\xdc\x44\x0a\xbf\xce\x6f\x01\x66\x3e\x3e\x00\xf1\x2c\xf8\xd5\xfd\x69\xe8\xbe\x95\x6e\x35\x58\x31\x71\xe9\xa5\x15\x13\x1f\xcb\x34\x79\x53\x68\x04\xe9\x29\xa1\x5e\xe3\xad\xa6\x6a\x43\x8c\x0e\x69\x89\xec\xf0\xf8\xb1\x74\x4f\x4f\xf4\x21\xb8\x89\xb5\x9a\xa6\x0b\x65\x49\x58\x6a\x09\x8b\x44\x67\x92\x0f\xaa\x2b\xf7\xac\x13\x2f\x6f\x5b\x27\xfe\xc0\x79\xe7\x0e\x45\x68\x8f\xcd\x7e\x86\x71\x3b\x0d\x3e\x92\xe1\x60\xbb\x9b\xfd\xe4\x4d\xfc\xde\x1b\xdc\xd0\xed\x0d\xba\x3f\x01\x00\x00\xff\xff\xea\xd9\xbe\x05\x97\x0a\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 2711, mode: os.FileMode(420), modTime: time.Unix(1508537102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xcb\x8e\xdb\xb8\x12\x5d\x5f\x7f\x45\x41\xc8\x22\x01\x22\xc7\x76\xf7\xcd\x75\x16\xbd\xba\x18\x60\x56\x99\x00\x93\x5d\x10\x08\x94\x54\xb2\x89\xa6\x49\x0d\x49\xd9\xf1\x34\xfc\xef\x03\x3e\x64\x4b\xd6\xdb\xed\x60\x90\x64\xd1\x6e\xb3\xea\x90\x3c\xf5\xd0\x21\xd5\x7b\x22\x29\x89\x19\x42\xa0\x14\x8b\x12\x94\x9a\x66\x34\x21\x1a\x03\x78\x99\x01\xe8\x63\x8e\xf0\x04\x81\xd2\x92\xf2\x4d\x30\x3b\xcd\x66\x9d\x1e\x51\x2e\xe9\xde\xfc\x7c\xc6\xe3\x08\x6f\xb2\x27\x94\x91\x98\x32\xaa\x8f\xd1\xdf\x82\xa3\xaa\x3b\x31\xaa\xb4\x75\x11\x85\xce\x0b\x0d\x81\x14\x85\x46\x19\xc5\x24\x79\x46\x9e\x46\x0a\xe5\x9e\x26\x7e\x9d\x7b\xc2\x0a\xeb\xf5\xe6\x65\x23\xc4\x86\x61\x94\x88\x5d\x5e\x68\xbc\x36\x9f\x3b\x94\x90\xc5\xa1\x1f\x09\xcb\x11\x4e\x76\x78\x6a\x9b\x91\xc5\x11\xcd\xdd\x3c\x7d\x33\x6d\x98\x88\x09\x8b\x48\x9a\x4a\x54\x6a\x9e\x64\x61\xf9\xd1\xff\xac\x83\x2b\xb5\x8d\x72\x29\x7e\x1c\xc7\xe2\x57\x80\x95\xda\x86\xd6\xb7\x1d\x5a\x27\x79\x34\x6d\xed\x15\x6c\x9d\xe4\xa1\x73\x6e\x07\x3f\xa8\x1b\x40\x0f\x1d\x24\x24\x12\xd3\x6d\x11\x4f\x46\x74\x6e\x75\x4c\x89\x4a\x14\x32\x41\x08\xae\xbc\x32\x2a\xf1\x40\x18\x0b\x20\x28\x3f\x86\x49\xe6\x66\x33\x41\x07\xf7\xcf\x4e\xb8\x27\x72\x8e\x7c\x1f\xd1\xf4\x14\x26\x59\x28\x72\xe4\xc1\x0c\x20\xc5\x1c\x79\xaa\x22\xc1\xe1\x09\xbe\x5d\x4f\xc0\x51\x1f\x84\x7c\x9e\xc7\x31\x0b\xfd\xe7\xe0\xbb\x01\x77\x9f\xcf\xe0\xc3\x6e\x65\x12\xce\x00\x08\x63\xe2\xe0\x19\xc9\xa5\xd0\x22\x11\xcc\xc0\xe8\x24\x0f\xdc\x97\x42\x6a\xe5\xb0\xbf\x05\xeb\x45\xf0\x1e\x82\xc7\xc7\x07\x3b\xf1\xc9\x00\x38\x36\x22\x49\xf8\x06\x95\x35\x5a\xcc\xed\xff\x0f\x8b\xe0\xbb\x31\xd0\x44\x6e\x50\x47\x9a\x6c\xdc\xf0\xab\x6b\xe7\x7b\x6f\x18\xea\xf5\x11\x40\x70\xa9\x90\x4a\x2c\x5a\xa2\xd0\x1f\x5d\x0f\x9b\x09\x79\x20\x32\xa5\x7c\x13\xc9\x82\xa1\x83\xdf\x6a\x9d\x87\x97\x91\xd0\x8d\x8c\x88\xbb\x71\x34\x2c\xd3\xbc\x5c\xef\xcd\x25\x5f\xf2\x0c\x5d\x69\xe0\xc3\x60\xa6\x74\x0d\x61\x5e\xae\x9c\xc5\xbe\xca\x15\xb2\x2c\x62\x94\x3f\x5b\x3c\x13\x78\x17\x56\x83\xb7\x5e\xbc\x8e\x1f\x75\x33\x41\xea\x5f\x60\x48\xd5\x29\x52\xe3\x38\x32\x75\xd1\x4b\x52\x23\x06\x95\xfc\x29\x67\x68\xf0\xd2\x24\xc6\xda\x3b\x63\xdb\x34\x54\x22\x69\xae\xa9\xed\x1a\x81\x44\xc2\xd8\x11\x08\x30\x41\x52\x88\x09\x23\x3c\x41\x09\x71\xa1\xc1\x3c\xeb\x30\x05\xa2\x80\x70\x30\x20\x70\x06\x29\x24\x8b\x76\x24\xef\xe4\xc6\x8f\xd7\x08\x29\x24\x0b\xcd\x77\x55\x4a\x46\xee\x5e\x5d\x6f\x5f\xf5\xec\xbf\x9b\x04\xd5\xce\x42\xe9\x30\x85\x0a\xd5\xce\xc5\xab\x09\x01\xb8\xd2\x2f\x1d\x4d\xf0\xca\xca\xe0\x9a\x5f\xab\x58\xfd\x7d\xaf\x21\xac\x02\x0f\x71\x21\x34\xca\x25\x66\xf4\x47\x83\xcb\x96\x2c\x2a\x14\x4a\xc3\xc8\x9e\xa6\x98\x9a\x2d\x80\x97\x5d\xf0\x8c\x47\xf8\x60\xbf\xa9\xcc\x06\x39\xa1\xd2\x16\xc4\x45\x9c\xb9\x69\x32\xca\xf0\xad\x99\xab\x47\xc6\xbd\xb3\x2b\xa8\xc2\xf5\xba\x3a\x73\x46\x33\x4c\x8e\x09\x43\x78\x99\xfd\x27\x91\x68\xb0\x62\xcc\x84\xc4\x28\x45\xa5\xa5\x30\x0b\xd0\xb2\x40\xfb\xa0\xea\x63\xce\x87\xf2\x2a\x19\x7d\x30\xfb\x9f\x19\xbe\x83\x5b\xfe\x32\x52\x30\x5d\x3e\xc4\x5e\x29\x12\xc7\x96\xd4\x16\x09\xd3\xdb\x28\xd9\x62\xf2\xec\xd6\x9f\x17\x31\xa3\x49\xe8\x06\x42\x3f\xd0\x5a\x51\x1d\x2d\xd7\x01\xd8\x3d\xd9\x3e\x55\x9d\xc2\x50\xed\x9a\x5e\x13\x69\xbd\x58\x2f\xcc\xa8\xc4\xbf\x0a\x54\x3a\xca\x89\xde\x56\xe6\xf9\xe0\x70\x82\xc1\x68\x34\x26\xbd\xcf\xbe\xca\x6e\xdd\xb1\xf0\xe1\x75\x8f\x94\x7e\x26\x27\xfa\xd6\xd8\x9a\x44\x55\x87\x5f\x43\x06\x3a\x21\xb8\x5e\xf4\xe9\xc0\xe5\xc3\x62\xbe\x5a\x2e\xad\x16\x5c\xad\x8c\xfd\xc3\x7f\xe7\xcb\x4f\xee\x8b\xe5\x47\xeb\x5a\x15\x87\x70\x47\x79\xd8\x3c\xfe\xf8\x99\x72\x21\xd8\xd0\x61\xae\x62\x5a\x3f\x06\x5d\xce\x6e\x9d\xa9\x50\xd3\x9d\x67\xcf\x81\x2e\x72\xb1\x9b\x90\x66\x6d\xe0\xdd\x39\x76\xb6\xfe\x75\x0e\x1b\xab\xd5\x6a\x75\xc9\xaf\xc1\x63\xc4\x40\xd4\xfa\x9f\x9e\xb5\xec\xb8\x31\x74\xa6\x08\x50\x29\x2a\x78\x44\xb2\x8c\x72\xaa\xed\x33\xf0\xf3\x1f\x9f\x7f\x1b\x88\x6b\x9b\x68\xee\x0e\xef\xd0\x3a\x6a\x42\x77\x5a\x82\x77\xaa\x5b\x03\x63\xe3\xe1\xb4\x78\x35\x78\x5f\xff\xff\xe5\x4a\xa1\xdf\xef\x5e\xe1\xf6\xa2\xad\xdc\x2f\x8c\xa8\xda\x7a\x65\x5d\x7c\x47\x95\x56\xc5\xfc\x57\x28\xab\xe5\x62\xf5\x18\x3e\xac\xfe\xf7\x71\x7d\x7b\x71\x35\xd8\xed\xaf\xae\x5a\x53\x6c\x65\x77\x88\xd7\x1b\x14\x43\x4f\x14\x7b\x05\x50\x3d\x9c\x5d\x9a\xe1\x95\x8a\xa1\xd1\x6f\x6e\x62\xa5\xb7\xe3\x18\x01\x57\x21\xc5\x06\xd6\x66\x43\x33\xba\x0d\x06\x5b\x63\xfc\x7e\x06\xd0\x1f\xe7\xd6\x46\xd6\x17\x87\x61\xfe\x27\xb6\xb2\xca\xa2\x7b\x7b\x59\xa5\x08\xee\xd1\xd1\x46\xdc\x66\xde\xde\xca\x0e\x6a\xb2\xf0\x38\x0c\xdc\x75\x19\x83\x69\xf9\x39\x0a\x71\x72\x3e\x8e\x4c\xc5\x16\xf1\x3f\xaa\xef\xb4\xe6\xe3\x41\xf9\x6b\xa5\x51\xd9\x78\xb6\x9e\x9e\x8b\x07\xd5\x9f\x83\xf6\xba\xe8\x0e\xc9\x77\x7d\xeb\x7d\x13\x1d\x93\xd8\xf8\x09\x64\xac\x17\x3f\x85\x8b\xeb\x37\x00\xb7\x56\xa1\x7f\x13\xd0\x7c\x79\x73\x05\x6c\x9e\xa0\x43\xc0\xa5\xd8\x38\xa3\x56\x7c\x27\xe8\x14\xe7\x5c\x8f\x5b\x33\x66\xce\xea\x2c\xfa\x4b\x9d\x31\x51\x64\x4c\x3e\x20\xae\x1f\x1f\xbd\xba\x98\x2a\x2e\x6a\x4c\x8f\x96\x15\x0d\x32\xba\x98\x98\xd4\xf6\x26\xa0\xde\x51\xfb\xb7\x05\xb6\x2f\xb8\x93\xab\xd1\x53\xdc\x5f\x8f\x26\x82\xaf\xaf\xc8\x49\x6f\xd0\x1a\xef\x5c\x83\xce\xb3\xfe\x08\x76\xce\xbe\xe7\xdd\x79\xf3\x27\x08\xce\x2d\xfd\xbc\x37\xf7\xfd\xef\x5f\xbf\x7e\xf9\xd3\xf2\x49\x77\x28\x0a\x1d\x29\x4c\xe0\x09\x3e\x2d\x8c\xde\x43\x4e\x62\xb3\xda\x94\x1b\xdb\x8c\x30\x85\x33\x00\xbf\x30\x5f\x1a\x1b\x29\x8a\xbc\x95\x12\xca\x95\x26\x3c\xc1\xc8\x9a\x5c\x6e\x31\xe6\x8b\xab\x40\x9c\xee\x01\xba\xfc\x19\xa0\xab\x16\xd0\x31\x8f\xf4\x11\x4f\xf3\xd1\xd7\xdc\xf5\xc5\x55\x53\xc4\xa5\x44\x22\x0a\xae\xab\x29\xc1\x90\x6f\xf4\xd6\xde\x23\x37\xff\x16\xc0\x5d\x25\x8f\x4b\xa3\xf0\xcd\xcb\x5b\x8b\x3e\xa7\x3c\xc5\x1f\xef\x4e\xe1\x9b\x17\x64\xb8\x43\xae\x3b\xd0\xdf\x43\xcd\xbe\xe5\x9a\x5d\xa3\x94\x24\x13\x72\x07\x1b\xe4\x28\x89\xc6\x14\xca\x1d\xfa\x08\xe9\x2d\xd1\x40\x15\xec\x0a\xa6\x69\x68\x70\x21\x13\xd2\xbf\xb3\x60\x82\xa4\xee\xbd\x86\xfd\xcb\x07\x00\x3b\x5e\xdd\xca\xc4\x15\x7a\x36\xd2\xc8\x9e\x7b\x5c\xa6\x94\x9d\xef\x5c\x34\xfe\x54\x74\x91\x30\xa7\xd9\x69\xf6\x4f\x00\x00\x00\xff\xff\x2a\x84\x03\x98\xe3\x21\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 8675, mode: os.FileMode(420), modTime: time.Unix(1508959172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x3f\x8f\xdc\x20\x10\xc5\xeb\xf0\x29\x46\xa3\x94\xc1\x85\x73\x6d\xaa\x28\xed\x25\x45\xba\xe8\x84\x58\x7b\xec\x45\xc7\x31\x08\xf0\x5a\xd1\xc9\xdf\x3d\xc2\x66\xbd\xbe\xdc\x9f\x5d\x69\xb5\x95\x47\xe3\xc7\x63\xf8\x3d\xe0\x21\xf9\x21\x01\x36\xec\x1a\x1e\x42\x24\x95\x74\xe8\x29\x29\xcf\x6c\x11\x9e\xc5\xa7\x83\xb6\x03\xc1\x37\xc0\xcf\xcf\x3d\x73\x6f\x49\x35\xfc\xe4\x87\xf4\x42\x59\x2d\xb5\x9c\x6b\xa7\x9f\x68\x42\x31\x09\xf1\xda\xdd\xee\x94\xf1\xd9\x17\x00\xe0\x7d\x6b\xdd\xb6\x81\x62\xac\xd6\x85\xf2\xd8\x29\xdf\xc5\x3f\x50\xe4\x21\x34\x04\xf8\xdf\xfa\xce\x04\x1a\xb5\xb5\x08\x78\x2c\xe5\xea\xb5\x6c\x9f\xa7\xcc\x43\xcc\xdb\x1f\x74\xa8\xc8\x1d\x94\x69\xa7\x93\x4e\xb2\x27\x87\x59\x4a\x69\xe4\xf0\xf8\xe6\xa4\xe5\x5f\xb5\xdb\x59\x79\xac\x0b\x00\x01\xa0\xad\xe5\xb1\x9c\xd6\x07\x4e\xdc\xb0\xcd\x36\xa9\xf1\xb8\x34\x39\xa4\xb8\x8c\xf1\x07\xef\xee\xbe\xe2\x17\xc0\xba\xae\x6b\x7c\x10\x00\x53\xb6\x28\x94\x93\xee\xe3\x2c\x3a\x1d\xe3\xe1\x43\x04\x05\x14\x6e\xe8\xcb\xb5\xb7\x02\x78\xff\xf4\x1f\x03\x7e\x71\x4b\x70\x93\xfe\x85\xde\x02\x20\x52\x8c\x86\x9d\xd2\x5d\x67\x9c\x49\x7f\xb3\xfe\xfe\xe7\xfd\x8f\x33\xc9\x72\x18\x75\x68\x8d\xeb\x55\x18\x2c\x21\x60\x8c\x7b\x79\xea\xca\xa5\xbb\x4d\xf8\x4c\xca\x31\xee\x71\xe5\xbc\x51\x5f\x78\xdb\x23\xd9\x4e\x59\xe3\x1e\xa7\xec\x92\xf3\x54\x41\xbb\x9e\x66\x97\x39\x4a\x01\x60\xbc\xda\xc6\xff\xfb\xfb\xaf\xd2\x2d\x89\xbc\xbd\xe5\xd5\xaf\xe0\x15\xab\x7d\x4a\x3e\x5e\x45\x6b\x76\xb8\x19\xaf\xfc\x02\x6e\x8c\xeb\x5f\x00\x00\x00\xff\xff\x5c\xc2\x73\xd4\xf2\x04\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 1266, mode: os.FileMode(420), modTime: time.Unix(1508535618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJumpboxTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\xc1\x8a\x83\x30\x10\x06\xe0\xf3\xe6\x29\x86\xb0\x57\x15\x84\x5c\x84\x7d\x96\x90\x35\x83\xb5\x44\x13\x26\x33\x22\x88\xef\x5e\x4a\xad\x56\xe8\xa5\xbd\x86\xfc\xdf\xff\x0f\x61\x8e\x42\x2d\x82\xee\x62\xec\x02\xda\x36\x0e\x49\x18\xad\xf3\x9e\x30\x67\x0d\xfa\x2a\x43\xfa\x8f\x73\xd1\x27\x0d\x8b\x02\x18\xdd\x80\xf0\x07\xfa\x77\x99\x1c\x95\x38\x4e\xb6\xf7\x6b\xf1\xf2\x4b\xad\x4a\x45\xe1\x24\xbc\x87\xad\x50\x78\xa4\x01\x26\x17\x64\x03\xde\x77\x96\x87\x55\x6e\x4f\x6b\x53\xd7\x27\x17\x67\x46\x1a\x5d\xb0\xcf\x55\x5f\xba\x27\xd4\xf7\x84\x2d\x47\x3a\x8e\x5f\xd4\xcf\xce\x5e\x98\x53\x6e\xaa\xea\xb3\xd9\xc6\x18\x73\x2f\xb9\x05\x00\x00\xff\xff\xb2\xf6\x55\xa8\x69\x01\x00\x00")

func templatesJumpboxTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesJumpboxTf,
		"templates/jumpbox.tf",
	)
}

func templatesJumpboxTf() (*asset, error) {
	bytes, err := templatesJumpboxTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jumpbox.tf", size: 361, mode: os.FileMode(420), modTime: time.Unix(1508537102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\x41\x0a\xc3\x20\x10\x05\xd0\x75\x3c\x85\x0c\x59\xb4\x9b\xde\xa0\x67\x29\x36\x99\xca\x14\x99\x91\x89\x08\xad\x78\xf7\x22\x16\xcc\xa6\xa4\x4b\xf9\x4f\x3e\xf3\xb3\x53\x72\xf7\x80\x16\xa2\xca\x13\x97\x74\xa3\x15\x6c\x31\x53\x7a\x45\xb4\x57\x0b\x5b\x52\x62\x0f\xa6\x1a\x33\xac\xa2\x27\xe1\x63\xf7\x16\xc6\x63\x85\x9c\xff\x6a\x5d\x14\x57\xe4\x44\x2e\x6c\xbf\x70\x54\xc9\xb4\xa2\x5a\xf0\x22\x3e\xf4\xf2\xdd\xbf\xc6\xe7\xf2\xa0\x80\x27\x98\x4b\x76\x7a\xd9\x85\x15\xce\x15\xcc\xf4\x1d\xa2\xd3\x46\xc6\x32\x2d\xee\xb7\x8f\xb4\xbf\x6b\xab\xff\x04\x00\x00\xff\xff\x39\xda\x2a\x22\x4d\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 333, mode: os.FileMode(420), modTime: time.Unix(1508535618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/bosh_director.tf": templatesBosh_directorTf,
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/jumpbox.tf": templatesJumpboxTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"bosh_director.tf": &bintree{templatesBosh_directorTf, map[string]*bintree{}},
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"jumpbox.tf": &bintree{templatesJumpboxTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

